//1008. Construct Binary Search Tree from Preorder Traversal
/*

Give the function a bound the maximum number it will handle.
The left recursion will take the elements smaller than node.val
The right recursion will take the remaining elements smaller than bound

Complexity
bstFromPreorder is called exactly N times.
It's same as a preorder traversal.
Time: O(N)

 */

import javax.swing.tree.TreeNode;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int index;
    public TreeNode bstFromPreorder(int[] preorder) {
        if(preorder == null || preorder.length <1){
            return null;
        }
        index = 0;
        return helper(preorder, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    //low and high is the bound to handle
    public TreeNode helper(int[] preorder, int low, int high){
        if(index == preorder.length || preorder[index] < low || preorder[index] > high){
            return null;
        }

        TreeNode root = new TreeNode(preorder[index++]);
        root.left = helper(preorder, low, root.val);
        root.right = helper(preorder, root.val , high);
        return root;
    }
}
