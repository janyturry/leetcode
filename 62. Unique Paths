//62. Unique Paths
//leetcode


import java.util.Arrays;

//
class Solution {
    public int uniquePaths(int m, int n) {
        int [][] dp = new int[m][n];

        for(int i  = 0 ; i <m ; i++){
            dp[i][0] = 1;
        }

        for(int i  = 0 ; i <n ; i++){
            dp[0][i] = 1;
        }

        for(int i = 1; i < m ; i++){
            for(int j = 1; j < n; j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }

        return dp[m-1][n-1];
    }


    //优化memeory, 因为是从上到下，从左到右，所以其实可以只用一位数组存储， dp[i-1][j] == dp[j]   dp[i][j-1] == dp[j-1]
    public int uniquePaths(int m, int n) {
        int[] dp = new int[n];
        Arrays.fill(dp, 1);

        for(int i =1; i <m; i++){
            for(int j =1; j <n;j++){
                dp[j] = dp[j] + dp[j-1];
            }
        }

        return dp[n-1];
    }
}


