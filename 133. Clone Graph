//133. Clone Graph
//leetcode


import java.util.LinkedList;

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;

    public Node() {}

    public Node(int _val,List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
//BFS
class Solution {
    public Node cloneGraph(Node node) {
        if( node ==null){
            return node;
        }

        Map<Node,Node> map = new HashMap<>();
        Node n = new Node(node.val, new LinkedList<Node>());
        map.put(node, n);

        Queue<Node> q = new LinkedList<Node>();
        q.offer(node);

        while(!q.isEmpty()){
            Node tmp = q.poll();
            for(Node nei : tmp.neighbors){
                if(!map.containsKey(nei)){
                    map.put(nei, new Node(nei.val, new LinkedList<Node>()));
                    q.offer(nei);
                }

                map.get(tmp).neighbors.add(map.get(nei));
            }
        }
        return  n;
    }
}


//DFS

class Solution {
    public Node cloneGraph(Node node) {
        Map<Node , Node> map = new HashMap<>();

        return clone(node, map);
    }

    public Node clone (Node node , Map<Node, Node> map){
        if(node == null){
            return node;
        }

        if(map.containsKey(node)){
            return map.get(node);
        }

        Node copyNode = new Node (node.val, new LinkedList<Node>());
        map.put(node, copyNode);

        for(node child : node.neighbors){
            if(!map.containsKey(child)){
                clone(child, map);
            }else{
                map.get(node).neighbors.add(map.get(child));
            }
        }

        return node;
    }
}
