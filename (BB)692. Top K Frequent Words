//692. Top K Frequent Words
/*
复杂度分析
时间复杂度： O(Nlogk)。其中 NN 是 words 的长度。我们用 O(N) 的时间计算每个单词的频率，然后将 N 个单词添加到堆中，添加每个单词的时间为 O(logk) 。最后，我们从堆中弹出最多 k 次。因为 k≤N 的值，总共是O(Nlogk)。
空间复杂度：O(N)，用于存储我们计数的空间
*/

class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map  = new HashMap<>();
        for(String s : words){
            map.put(s, map.getOrDefault(s,0)+1);
        }
        
        PriorityQueue<String> pq = new PriorityQueue<>( (a,b)-> ( map.get(a) == map.get(b) ? b.compareTo(a) : map.get(a) -map.get(b)) );
        
        for(String s : map.keySet()){
            pq.offer(s);
            if(pq.size()>k){
                pq.poll();
            }
        }
        
        List<String> res = new LinkedList<>();
        
        while(!pq.isEmpty()){
            res.add(0, pq.poll());
        }
        
        return res;
    } 
}
