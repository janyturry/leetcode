//199. Binary Tree Right Side View
//leetcode

import javax.swing.tree.TreeNode;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //DFS
    //time: O(n)
    //space : O(n)
    //DFS visiting order: self-> right -> left.   那么每一层第一次出现的点就是我们要的
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new LinkedList<>();
        if(root == null){
            return res;
        }

        dfs(root, res, 0);
        return res;

    }

    public void dfs(TreeNode root, List<Integer> res, int level){
        if(root == null){
            return;
        }

        if(level == res.size()){
            res.add(root.val);
        }

        dfs(root.right, res, level+1);
        dfs(root.left, res, level+1);
    }



    //BFS
    //time: O(n)
    //space : O(n)
    //
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new LinkedList<>();
        if(root == null){
            return res;
        }

        Queue<TreeNode> q = new LinkedList<TreeNode>();

        q.offer(root);

        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0 ; i < size; i++){
                TreeNode tmp = q.poll();
                if(i == size -1){
                    res.add(tmp.val);
                }

                if(tmp.left != null){
                    q.offer(tmp.left);
                }

                if(tmp.right != null){
                    q.offer(tmp.right);
                }
            }
        }

        return res;
    }
}


