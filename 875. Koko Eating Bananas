/*
Time Complexity:
O(NlogW), where N is the number of piles, and W is the maximum size of a pile.
Space Complexity: O(1) 
 */


class Solution {
    public int minEatingSpeed(int[] piles, int H) {
     int low = 1;
        int high = getMaxPile(piles);
        
        while(low +1 < high){
            int mid = low+ (high-low)/2;
            if(finish(piles, H, mid)){
                high =  mid;
            }else{
                low = mid+1;
            }
        }
        
       if(finish(piles, H, low)){
           return low;

       }else{
           return high;
       }
        
        
    }
    
    public boolean finish(int[] piles, int H , int k ){
        int count = 0;
        
        for(int i : piles){
            count += i/k;
            if(i%k!=0){
                count++;
            }
        }
        
        if(count <=H){
            return true;
        }else{
            return false;
        }
    }
    
    
    public int getMaxPile(int[] piles){
        int res = Integer.MIN_VALUE;
        
        for(int i : piles ){
            res = Math.max(res, i);
        }
        
        return res;
    }
}
