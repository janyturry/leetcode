//https://leetcode-cn.com/problems/longest-valid-parentheses/solution/zui-chang-you-xiao-gua-hao-by-leetcode-solution/
/*
我们定义 dp[i] 表示以下标 i 字符结尾的最长有效括号的长度。我们将 dp 数组全部初始化为 0 。显然有效的子串一定以 ‘)’ 结尾，
因此我们可以知道以 ‘(’ 结尾的子串对应的 dp 值必定为 0 ，我们只需要求解 ‘)’ 在 dp 数组中对应位置的值。

我们从前往后遍历字符串求解 dp 值，我们每两个字符检查一次：
(1)s[i]=‘)’ 且 s[i−1]=‘(’，我们可以推出：
dp[i]=dp[i−2]+2

我们可以进行这样的转移，是因为结束部分的 "()" 是一个有效子字符串，并且将之前有效子字符串的长度增加了 2。

(2) s[i]=‘)’ ,  s[i−1]=‘)’，我们可以推出：
如果 s[i−dp[i−1]−1]=‘(’，那么

dp[i]=dp[i−1]+dp[i−dp[i−1]−2]+2
 */
/*
复杂度分析
时间复杂度： O(n)，其中 n 为字符串的长度。我们只需遍历整个字符串一次，即可将 dp 数组求出来。
空间复杂度： O(n)。我们需要一个大小为 n 的 dp 数组。
 */
class Solution {
    public int longestValidParentheses(String s) {
        if(s == null || s.length() < 2){
            return 0;
        }
        int n = s.length();
        int[] dp = new int[n];
        int max = 0;
        for(int i = 0 ; i< n;i++){
            char cur = s.charAt(i);
            if(cur == '('){
                dp[i] = 0;
            }else if(cur == ')'){
                if(i>=1 && s.charAt(i-1) == '('){
                    dp[i] = (i>=2?dp[i-2]:0) + 2;
                }else if(i>= 1 && s.charAt(i-1) == ')' &&i-dp[i-1]-1 >=0 && s.charAt(i-dp[i-1]-1) =='(' ){
                    dp[i] = 2 + dp[i-1] +  (i- dp[i-1]-2 >=0 ? dp[i-dp[i-1]-2]:0);
                }
            }
            max = Math.max(dp[i], max);
        }
        return max;
    }
}
