
import java.util.ArrayList;
import java.util.List;

//118. Pascal's Triangle
//leetcode
//思路：当前位置val 等于 row[i-1][j] + row[i-1][j-1] 需要注意的是左右两边都是1，所以最后要加上1
//tmp其实只有一个， 然后每次循环就是更改tmp除了首尾的值
/*
[
[1],
[1,1],
[1,2,1],
[1,3,3,1],
[1,4,6,4,1]
]
 */
public class generate {
	public static List<List<Integer>> generate(int numRows) {
		List<List<Integer>> res = new ArrayList<List<Integer>>();
		if(numRows ==0 ){
			return res;
		}
		List<Integer> tmp = new ArrayList<Integer>();
		tmp.add(1);
		res.add(new ArrayList<Integer>(tmp));
		for(int i = 1 ; i < numRows; i++){
			for(int j = i-1; j >0; j--){
				tmp.set(j, tmp.get(j) + tmp.get(j-1));
			}
			tmp.add(1);
			res.add(new ArrayList<Integer>(tmp));
		}
		
		return res;
	}
}
