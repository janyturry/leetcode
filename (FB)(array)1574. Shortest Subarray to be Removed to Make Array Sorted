//https://leetcode-cn.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/solution/hua-hua-by-solituderain/

public int findLengthOfShortestSubarray(int[] arr) {
        int n = arr.length, left = 0;
        
        // [0...left]有序
        while(left + 1 < n && arr[left] <= arr[left + 1]){
            left ++;
        }
        if(left == n-1) return 0;
        
        // [right...n-1]有序
        int right = n -1;
        while(right > 0 && arr[right -1]<= arr[right]){
            right --;
        }
        
        
        // 完全删除一边[left+1, n-1], 或者[0...right - 1]
        int result = Math.min(n-left-1,right);
        
         // 左边和右边各保留一部分
        int i=0, j = right;
        while(i <= left && j <= n-1){ //这里可以用二分查找优化c，找第一个>=max(A)的索引
            //因为这部分是单调的，谁小移谁就可以
            //我们最后比较的是Math.min(Math.min(d,(A+B), B+C ) )
            if(arr[i] <= arr[j]){
            // [0...i] 和 [j...n-1] 有序, 删除 [i+1...j-1]
                result = Math.min(result, j - i -1);
                i++;
            }else{
                j++;
            }
        }
        return result;
    }
