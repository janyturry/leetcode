

/*
时间复杂度：O(2^n*n),其中 n 是数组 candidates 的长度。在大部分递归 + 回溯的题目中，我们无法给出一个严格的渐进紧界，
故这里只分析一个较为宽松的渐进上界。在最坏的情况下，数组中的每个数都不相同，在递归时，每个位置可以选或不选，如果数组中所有数的和不超过 target，那么 2^n
种组合都会被枚举到；在 target 小于数组中所有数的和时，我们并不能解析地算出满足题目要求的组合的数量，但我们知道每得到一个满足要求的组合，(拷贝路径放入答案)需要 O(n) 的时间将其放入答案中，
因此我们将 O(2^n) 和O(n) 相乘，即可估算出一个宽松的时间复杂度上界。

由于 O(2^n * n)在渐进意义下大于排序的时间复杂度 O(nlogn)，因此后者可以忽略不计。
 */

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        //排序是为了后面剪枝
        Arrays.sort(candidates);
        helper(candidates, 0, target, res, new ArrayList<Integer>());
        return res;
    }

    public void helper(int[] candidates, int start, int target, List<List<Integer>> res, List<Integer> path){
        //满足条件，加入结果
        if(target == 0){
            //这一步复杂度是N
            res.add(new ArrayList<Integer>(path));
        }
        //不满足条件，直接return
        if(target <0){
            return;
        }
        // 重点理解这里从 begin 开始搜索的语意
        //使用START 是为了去掉情况例如 candidate : [ 5,2] , res : [ 5,2] , [2,5], 因为不计较顺序， 所以这是重复结果，
        //要去除重复，就需要在每一层里面不选择同一层前面出现过的结果。
        for(int i = start; i < candidates.length;i++){
            //这一题目数字有可能重复，所以同一个人位置，没必要选择重复的数字，这一步是去重，39题输入是不会出现相同的数字所以不需要这一步
            if(i>start && candidates[i] == candidates[i-1]){
                continue;
            }
            // 重点理解这里剪枝，前提是候选数组已经有序，
            if(target - candidates[i]<0){
                break;
            }
            //做选择，选择一个
            path.add(candidates[i]);
            //i+1 是为了不重复使用
            helper(candidates, i+1, target - candidates[i], res, path);
            //把刚才的选择POP出来
            path.remove(path.size()-1);
        }
    }
}
