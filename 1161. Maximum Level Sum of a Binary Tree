/*
Time complexity: O(N) since each node is processed exactly twice: to push into queue and then to pop out.

Space complexity: O(N) to keep the queue. At each moment the queue contains not more than all nodes from one level.
The max number of nodes on one level is 
(N+1)/2, in the case of perfect tree. 
*/

class Solution {
    public int maxLevelSum(TreeNode root) {
        int max  = Integer.MIN_VALUE;
        int max_level  = 0;

        Queue<TreeNode> q = new LinkedList<>();

        q.offer(root);
        int level = 0;
        while(!q.isEmpty()){
            int size = q.size();
            int levelSum = 0;
            for(int i = 0 ; i < size; i++){
                TreeNode tmp = q.poll();
                if(tmp.left != null){
                    q.offer(tmp.left);
                }
                if(tmp.right != null){
                    q.offer(tmp.right);
                }
                levelSum+=tmp.val;

            }
            level++;
            if(levelSum > max){
                max = levelSum;
                max_level = level;
            }
        }
        return max_level;

    }
}
