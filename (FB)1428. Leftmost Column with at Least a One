/*
Time: O(M + N), where M is the number of rows, N is the number of columns in Binary Matrix
Space: O(1)
*/

class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        List<Integer> dimen = binaryMatrix.dimensions();
        
        int m = dimen.get(0);
        int n = dimen.get(1);
        int res = -1;
        int r = 0;
        int c = n-1;
        
        while(r >=0 && r <= m-1 && c >=0 && c <= n-1){
            if(binaryMatrix.get(r,c) == 1){
                res = c;
                c--;
            }else{
                r++;
            }
        }
        return res;
    }
}


// binary search, SEARCH the column. 
class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        List<Integer> dimen = binaryMatrix.dimensions();
        
        int m = dimen.get(0);
        int n = dimen.get(1);
        
        int left = 0;
        int right = n-1;
        
        int res = -1;
        
        while(left < right){
            int mid = left + (right - left)/2;
            if(!containOne(binaryMatrix, m, mid)){
                left = mid +1;
            }else{
                res = mid;
                right = mid;
            }
        }
        
        if(containOne(binaryMatrix, m,left)){
            return left;
        }else{
            return res;
        }
    }
    
    public boolean containOne(BinaryMatrix binaryMatrix, int m, int mid){
        for(int i = 0 ; i <= m-1; i++){
            if(binaryMatrix.get(i,mid) ==1){
                return true;
            }
        }
        return false;
    }
}
