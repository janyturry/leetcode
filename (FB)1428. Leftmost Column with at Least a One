/*
Time: O(M + N), where M is the number of rows, N is the number of columns in Binary Matrix
Space: O(1)
*/

class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        List<Integer> dimen = binaryMatrix.dimensions();
        
        int m = dimen.get(0);
        int n = dimen.get(1);
        int res = -1;
        int r = 0;
        int c = n-1;
        
        while(r >=0 && r <= m-1 && c >=0 && c <= n-1){
            if(binaryMatrix.get(r,c) == 1){
                res = c;
                c--;
            }else{
                r++;
            }
        }
        return res;
    }
}


/*
Solution 1 - Binary Search

Complexity:
Time: O(MlogN, where M is the number of rows, N is the number of columns in Binary Matrix
Explain: existOneInColumn costs O(M), binary search columns costs O(logN)
Space: O(1)
*/
class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        List<Integer> ma = binaryMatrix.dimensions();
        int m = ma.get(0);
        int n = ma.get(1);

        int res = -1;

        int s = 0;
        int e = n-1;
        while(s <= e){
            int mid  = s + (e-s)/2;
            if(helper(binaryMatrix, mid, m)){
                e = mid -1;
                res = mid;
            }else{
                s = mid+1;
            }
        }
        return res;
    }

    public boolean helper(BinaryMatrix binaryMatrix , int mid, int m){
        for(int i = 0 ;i < m;i++){
            if(binaryMatrix.get(i, mid) ==1){
                return true;
            }
        }
        return false;
    }
}







/*
Solution 2 - Linear Time

Time: O(M + N), where M is the number of rows, N is the number of columns in Binary Matrix
Space: O(1)
*/
class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        List<Integer> ma = binaryMatrix.dimensions();
        int m = ma.get(0);
        int n = ma.get(1);

        int res = -1;
        int x = 0;
        int y = n-1;

        //start from top right side, only can move left or down
        while(x>=0 && x<= m-1 && y>=0 && y<=n-1){
            //already prove this column is 1 , meet requirement, can go left to find smaller index.
            if(binaryMatrix.get(x,y)==1){
                res = y--;
            }else{
                //since it is non-desc order, so if it is 0, then no need to go left because all left item must smaller or equal than 0
                //then must go down
                x++;
            }
        }
        return res;
    }
}
