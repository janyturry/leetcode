//基本思路就是设置全局变量， 然后DFS 计算从根节点到叶子节点的每个路径的最大最小值， 然后比较结果。转化问题成为路径的最大最小值的差值最大

class Solution {
    int res = Integer.MIN_VALUE;
    public int maxAncestorDiff(TreeNode root) {
        if(root == null){
            return res;
        }        
        
        dfs(root, root.val, root.val);
        return res;
    }
    
    //从根节点到叶子节点的路径中的最大值和最小值，并求出差值更新全局变量
    public void dfs(TreeNode root, int max , int min){
        if(root == null){
            return ;
        }
        
        max =Math.max(max, root.val);
        min = Math.min(min, root.val);
        
        if(root.left == null && root.right == null){
            res = Math.max(res, Math.abs(max-min));
        }else{
            dfs(root.left, max, min);
            dfs(root.right, max, min);
        }
        
    }
}




class Solution {
    int res = Integer.MIN_VALUE;

    public int maxAncestorDiff(TreeNode root) {
        if (root == null) return 0;
        //如果当前节点没有子节点，则直接返回
        helper(root, root.val, root.val);
        return res;
    }

    /**
     * 每条从根节点到叶子节点的路径中的最大值和最小值，并求出差值更新全局变量
     */
    private void helper(TreeNode node, int max, int min) {
        if (node == null) return;
        max = Math.max(node.val, max);
        min = Math.min(node.val, min);
        //到达叶子节点，求最大差值
        if (node.left == null && node.right == null) {
            res = Math.max(res, Math.abs(max - min));
        }
        helper(node.left, max, min);
        helper(node.right, max, min);
    }
}
