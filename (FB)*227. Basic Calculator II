/*
具体来说，遍历字符串 s，并用变量 
preSign 记录每个数字之前的运算符，对于第一个数字，其之前的运算符视为加号。每次遍历到数字末尾时，根据 preSign 来决定计算方式：

加号：将数字压入栈；
减号：将数字的相反数压入栈；
乘除号：计算数字与栈顶元素，并将栈顶元素替换为计算结果。

注意这道题只有+,-,*,/ 和数字和空格， 不会有括号

时间复杂度：O(n)，其中 n 为字符串 s 的长度。需要遍历字符串 s 一次，计算表达式的值。
空间复杂度：O(n)，其中 n 为字符串  的长度。空间复杂度主要取决于栈的空间，栈的元素个数不超过 n
*/

class Solution {
    public int calculate(String s) {
        if (s == null || s.length() < 1) {
            return -1;
        }

        char preSign = '+';
        s = s.replaceAll(" ", "");
        int n = s.length();
        int num = 0;

        Deque < Integer > d = new LinkedList < > ();

        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);

            if (Character.isDigit(c)) {
                num = num * 10 + c - '0';
            }

            if (!Character.isDigit(c) || i == n - 1) {
                switch (preSign) {
                    case '+':
                        d.push(num);
                        break;
                    case '-':
                        d.push(-num);
                        break;
                    case '*':
                        d.push(d.pop() * num);
                        break;
                    case '/':
                        d.push(d.pop() / num);
                        break;
                }
                num = 0;
                preSign = c;

            }
        }

        int res = 0;
        while (!d.isEmpty()) {
            res += d.pop();
        }
        return res;
    }
}



class Solution {
    int i;
    public int calculate(String s) {
        /*
            将 减法、乘法、除法 转换为 加法
            某个数 num, 如果前面的对应的运算符是 -，那么 将 -num 压入栈中
            这样，我们只需在最后将栈的元素全部弹出，完成加法操作，即可得到最终结果

            对于括号，它存在递归性质
            即
            3 * (2 + 4 * 3) + 2
          = 3 * calculate(2 + 4 * 3) + 2
          = 3 * 24 + 2
          即我们可以将括号内的字符串当作一个运算式，再递归调用本函数，最终返回一个数值
        */
        i = 0;
        return dfs(s, i);
    }
    private int dfs(String s,int i){
        Deque<Integer> stack = new LinkedList<>();

        //记录某个连续的数，比如 "42"，那么我们首先 num = 4，然后遇到 2 ,num = num * 10 + 2 = 42
        int num = 0;
        char op = '+';
        for(; i < s.length(); i++){
            char ch = s.charAt(i);

            if(ch == ')'){
                break;
            }
            //遇到左括号，递归运算内部子式
            if(ch == '('){
                ++i;
                num = dfs(s, i);
            }

            if(Character.isDigit(ch)){
                num = num * 10 + (ch - '0');
            }
            //不是数字，不是空格（运算符 或 '(' 或 ')' ） 或者 到了最后一个字符，那么根据前面记录的 op 操作符 将数字压栈，然后将新的运算符 ch 赋值给 op
            if(!Character.isDigit(ch) && ch != ' ' ||  i == s.length() - 1){
                switch(op){
                    case '+':
                        stack.push(num); break;
                    case '-':
                        stack.push(-num); break;
                    case '*':
                        int pre = stack.pop();
                        stack.push(pre * num);
                        break;
                    case '/':
                        pre = stack.pop();
                        stack.push(pre / num);
                        break;
                }
                num = 0;
                op = ch;
            }
            /*
            遇到右括号，退出循环，然后计算结果， 返回上一层 dfs
            这一步写在最后是因为，当 ch 为 右括号 时，那么我们需要先将前面已经得到的 num 压入栈中，再退出循环
            */

        }
        int res = 0;
        while(!stack.isEmpty()){
            res += stack.pop();
        }
        return res;
    }
}
