/*
Two strings are isomorphic if the positions of the characters follow the same pattern. So I'm using maps to compare the position patterns.

For example:

String 1:              A B E A C D B
index pattern:         0 1 2 0 4 5 1
String 2:              X Y I X H K Y
index pattern:         0 1 2 0 4 5 1
Whether the two strings are isomorphic can be judged by the index patterns. In the above example, these two strings are isomorphic with the same index patterns.




*/

class Solution {
    public boolean isIsomorphic(String s, String t) {
        Map<Character, Integer> map1 = new HashMap<>();
        Map<Character, Integer> map2 = new HashMap<>();
        
        for(int i = 0 ; i < s.length(); i++){
            map1.putIfAbsent(s.charAt(i), -1);
            map2.putIfAbsent(t.charAt(i), -1);
            
            int indexA = map1.get(s.charAt(i));
            int indexB = map2.get(t.charAt(i));
            
            if(indexA != indexB){
                return false;
            }
            if(indexA == -1 && indexB == -1){
            	map1.put(s.charAt(i), i);
            	map2.put(t.charAt(i), i);
            }
        }
        return true;
    }
}



//leetcode 205
//205. Isomorphic Strings
//ASCII 的范围是0-255 (大写小写特殊字符)
//思路就是建立两个 整数map, 然后 把char 放进去做index, 看看那是不是两个值都是一样的
public class isIsomorphic {
	public boolean isIsomorphic(String s, String t) {
		// 检查是否长度一样和空

		if ((s == null && t == null) || (s.length() != t.length())) {
			return false;
		}
		// 两个mapping都是256, 需要两个mapping 是因为要检查一一对应
		int[] map1 = new int[256];
		int[] map2 = new int[256];

		for (int i = 0; i < s.length(); i++) {
			if (map1[s.charAt(i)] != map2[t.charAt(i)]) {
				return false;
			}
            //这里使用 i+1 是为了区分 i ==0 时候的没变化, ex: "ab", "aa"
			map1[s.charAt(i)] = i + 1;
			map2[t.charAt(i)] = i + 1;
		}
		return true;
	}
}
