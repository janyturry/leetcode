class Solution {
//走日子
    int[][] dir = new int[][]{{1,2},{-1,2},{1,-2},{-1,-2}, {2,1},{-2,1},{2,-1},{-2,-1}};

    class point {
        int x;
        int y;

        point (int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    public int minKnightMoves(int x, int y) {
        int res = 0;
        //因为从0，0点出发， 然后无论终点在哪个象限， 四个象限都是对称的， 所以转换到第一象限方便计算
        x = Math.abs(x);
        y = Math.abs(y);

        Set<String> visited = new HashSet<String>();

        Queue<point> q= new LinkedList<>();
        q.add(new point(0,0));
        visited.add("0,0");

        while(!q.isEmpty()){
            int size = q.size();
            for(int j = 0;  j< size; j++){
                point cur = q.poll();

                String path = new String(cur.x + "," + cur.y);
                if(cur.x == x && cur.y ==y){
                    return res;
                }

                for(int i = 0 ; i< 8; i++){
                    int newX = cur.x + dir[i][0];
                    int newY = cur.y + dir[i][1];
                    //这里是剪枝，考虑到最特殊的情况，目标是1，1 ，这时候就要从0，0-> 1,-2 -> 1,1,或者是 0,0-> -1,2 -> 1,1,
                    //所以只取其中一个0,0-> -1,2 -> 1,1 答案， 所以得出newX >=-1 && newY >=-1
                    if(!visited.contains(new String(newX + "," + newY)) && newX >=-1 && newY >=-1){
                        q.add(new point(newX, newY));
                        visited.add(new String(newX + "," + newY));
                    }
                }
            }
            res++;
        }
        return res;
    }
}
