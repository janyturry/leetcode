//3. Longest Substring Without Repeating Characters
//leetcode
//基本思路就是设定两个指针，刚开始i和j指针都是0， 然后j 指针一直往右移动， 一旦遇到重复的数字，i指针就开始移动，i指针一直移动到重复元素的下一个开始重新计算
//例如，  "baca", j指针 指到a, 遇到重复， 那么i 指针要一直移动到c ，然后j 符合while循环条件继续计算下去
class lengthOfLongestSubstring {
	public static int lengthOfLongestSubstring(String s) {
		if (s == null || s.length() == 0) {
			return 0;
		}
		int[] map = new int[256];
		int res = 0;

		int j = 0;
		for (int i = 0; i < s.length(); i++) {
			while (j < s.length() && map[s.charAt(j)] == 0) {
				map[s.charAt(j)] = 1;
				res = Math.max(res, j - i + 1);
				j++;
			}
			// 这一步操作是为了移动i指针until到重复的下一个char,然后重新开始计算
			map[s.charAt(i)] = 0;
		}
		return res;
	}
	
	public static void main(String [] argc){
		lengthOfLongestSubstring("abcba");
	}
}
