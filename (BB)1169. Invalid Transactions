class Solution {
    class T {
        String name;
        Integer time;
        Integer amount;
        String city;

        T(String name, Integer time, Integer amount, String city){
            this.name = name;
            this.time = time;
            this.amount = amount;
            this.city = city;
        }
    }
    
    public List<String> invalidTransactions(String[] transactions) {
        List<String> res = new LinkedList<>();
        Map<String, List<T> > map = new HashMap<>();
        for(String s : transactions){
            String [] sub = s.split(",");
            if(map.containsKey(sub[0])){
                List<T> list = map.get(sub[0]);
                list.add(new T(sub[0], Integer.parseInt(sub[1]), Integer.parseInt(sub[2]), sub[3] ));
                map.put(sub[0], list);
            }else{
                List<T> list  = new ArrayList<>();
                list.add(new T(sub[0], Integer.parseInt(sub[1]), Integer.parseInt(sub[2]), sub[3] ));
                map.put(sub[0], list);
            }
        }

        for(String s : transactions){
            String [] sub = s.split(",");
            if(Integer.parseInt(sub[2]) >1000){
                res.add(s);
                continue;
            }

            List<T> subList = map.get(sub[0]);
            for(int i = 0; i < subList.size(); i++){
                if(Math.abs(Integer.parseInt(sub[1]) - subList.get(i).time) <=60 &&   !sub[3].equals(subList.get(i).city)){
                    res.add(s);
                    break;
                }
            }
        }
        return res;
    }
}
