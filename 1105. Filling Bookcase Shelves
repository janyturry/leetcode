//1105. Filling Bookcase Shelves
//leetcode
/*
题意： 给n本书，每本书有一个厚度和高度，摆在书架上。
书架每一层最大宽度是shelf_width，摆不下时可以摆在下一层。
每层的高度为当前层所有书的最大高度，问书的总高度最小时多少。

思路：经典的动态规划题。
定义dp[i]为前i本书能够到达的最小高度。
则对于第i+1本书，有若干选择。
如自己单独一层，则状态转移为dp[i+1] = dp[i] + h[i+1]
如果和前面的书放在一起，则状态转移方程式dp[i+1] = min(dp[j] + max[h[j+1] ~ h[i+1])), 其中需要满足sum(w[j+1] ~ w[i+1]) <= shelf_width，含义是前j本书组成若干层，第j+1到第i+1本书组成一层。
对于这些选择，取最小值。
 */

class Solution {
    public int minHeightShelves(int[][] books, int shelf_width) {
        int[] dp  = new int[books.length+1];

        dp[0] = 0;

        for(int i = 1; i <= books.length; i++) {
            int width = books[i-1][0];
            int height =books[i-1][1];

            dp[i] = dp[i-1] + height;

            for(int j = i-1; j>=1;j--){
                width+= books[j-1][0];
                height = Math.max(height, books[j-1][1]);
                if (width > shelf_width) {
                    break;
                }
//1~~j-1 作为之前的， j ~~i 作为一层
                dp[i] = Math.min(dp[i], dp[j-1]+ height);
                }
        }

        return dp[books.length];
    }
}
