/*
Because the sort is based on merge sort for Object and time complexity of merge sort is O(n * logn).
That means n * logn times comparing happened.
For this question, it just makes the comparing time be O(m).
Thus it won't increase the number of "layers" of merge sort to log(n * m).

Time: O(n * m * log(n)), space: O(1)(excluding space cost of sorting part),
 where n = folder.length, m = average size of the strings in folder.
*/

class Solution {
    public List<String> removeSubfolders(String[] folder) {
        Arrays.sort(folder);
        List<String> res = new ArrayList<>();
        for(String cur : folder){
            if(res.size() == 0 || !cur.startsWith(res.get(res.size()-1) + "/")){
                res.add(cur);
            }
        }
        return res;
    }
}
