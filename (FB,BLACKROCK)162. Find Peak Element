//162. Find Peak Element
/*
Lets say you have a mid number at index x, nums[x]
if (num[x+1] > nums[x]), that means a peak element HAS to exist on the right half of that array, because (since every number is unique) 1. the numbers keep increasing on the right side, and the peak will be the last element. 2. the numbers stop increasing and there is a 'dip', or there exists somewhere a number such that nums[y] < nums[y-1], which means number[x] is a peak element.

This same logic can be applied to the left hand side (nums[x] < nums[x-1]).

*/

/*
思路

标签：二分查找
过程：
首先要注意题目条件，在题目描述中出现了 nums[-1] = nums[n] = -∞，这就代表着 只要数组中存在一个元素比相邻元素大，那么沿着它一定可以找到一个峰值
根据上述结论，我们就可以使用二分查找找到峰值
查找时，左指针 l，右指针 r，以其保持左右顺序为循环条件
根据左右指针计算中间位置 m，并比较 m 与 m+1 的值，如果 m 较大，则左侧存在峰值，r = m，如果 m + 1 较大，则右侧存在峰值，l = m + 1

*/

class Solution {
    public int findPeakElement(int[] nums) {
        int left = 0;
        int right = nums.length -1;
        
        while(left < right){
            int mid =left + (right - left)/2;
            if(nums[mid]>nums[mid+1]){
                right = mid;
            }else{
                left = mid +1;
            }
        }
        return left;
    }
}



class Solution {
    public int findPeakElement(int[] nums) {
        if(nums ==null ){
            return 0;
        }
        
        
        int s = 0;
        int e = nums.length-1;
        
        while(s + 1 < e){
            int mid = s + (e-s)/2;
            if(nums[mid] < nums[mid+1]){
                s = mid;
            }else{
                e = mid;
            }
        }
        
        if(nums[s]> nums[e]){
            return s;
        }else{
            return e;
        }
    }
}
