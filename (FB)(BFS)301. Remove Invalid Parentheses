//BFS

/*
基本思路就是先把原始S放入QUEEU,SET,出队列， 然后先检查是不是VALID， 然后遍历当前S， 每次删除一个括号， 检查是否访问过， 然后放入QUEUE和SET，一旦找到VALID， 然后这一层次的全部入RES。 

关键是使用SUBSTRING（）来拼接删除括号的字符
*/
public class Solution {
    public List<String> removeInvalidParentheses(String s) {
        List<String> res = new ArrayList<>();

        // sanity check
        if (s == null) return res;

        Set<String> visited = new HashSet<>();
        Queue<String> queue = new LinkedList<>();

        // initialize
        queue.add(s);
        visited.add(s);

        boolean found = false;

        while (!queue.isEmpty()) {
            s = queue.poll();

            if (isValid(s)) {
                // found an answer, add to the result
                res.add(s);
                found = true;
            }

            if (found) continue;

            // generate all possible states
            for (int i = 0; i < s.length(); i++) {
                // we only try to remove left or right paren
                if (s.charAt(i) != '(' && s.charAt(i) != ')') continue;

                String t = s.substring(0, i) + s.substring(i + 1);

                if (!visited.contains(t)) {
                    // for each state, if it's not visited, add it to the queue
                    queue.add(t);
                    visited.add(t);
                }
            }
        }

        return res;
    }

    // helper function checks if string s contains valid parantheses
    boolean isValid(String s) {
        int count = 0;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '(') count++;
            if (c == ')' && count-- == 0) return false;
        }

        return count == 0;
    }
}














import java.util.ArrayList;
import java.util.List;

//301. Remove Invalid Parentheses
//leetcode
//思路：DFS. 刚开始
public class removeInvalidParentheses {
	public List<String> removeInvalidParentheses(String s) {
		  List<String>  res = new ArrayList<String>();
			if(s == null || s.length() <1 ){
			    res.add("");
				return res;
			}
			helper(s , res, 0,0 ,'(', ')');
			
			return res;
	}

	public void helper(String s, List<String> res, int ist, int jst, char open, char close) {
		int openC = 0;
		int closeC = 0;
		for(int i = ist; i < s.length();i++){
			if(s.charAt(i) == open){
				openC++;
			}
			
			if(s.charAt(i) == close){
				closeC++;
			}
			
			if(closeC > openC){
				for(int j = jst; j <=i ;j++){
				    if(s.charAt(j) == close && (j == jst || s.charAt(j-1) != close)){
						helper(s.substring(0,j)+ s.substring(j+1, s.length()), res, i, j, open,close);
					}					
				}
				return;
			}
		}
			
			String reverse = new StringBuilder(s).reverse().toString();
			if(open == '('){
			    helper(reverse , res, 0,0 ,')', '(');
			}else{
			  res.add(reverse);
			}
	}
}
