/*
三步：

（1）去掉乱七八糟的符号；

（2）统一大小写；

（3）左右指针比较。
 */

/*
时间复杂度：O(|s|)，其中 |s| 是字符串 s 的长度。
空间复杂度：O(|s|)。由于我们需要将所有的字母和数字字符存放在另一个字符串中，在最坏情况下，新的字符串 sb 与原字符串 s 完全相同，因此需要使用 O(|s|) 的空间。

 基本思路就是只看数字和字母，双指针比较
 */

class Solution {
    public boolean isPalindrome(String s) {
        if(s == null || s.length()<1){
            return true;
        }

        StringBuilder sb = new StringBuilder();
        for(int i  = 0 ; i < s.length();i++){
            if(check(s.charAt(i))){
                sb.append(s.charAt(i));
            }
        }

        int l = 0;
        int r = sb.length()-1;
        while(l<r){
            if(Character.toLowerCase(sb.charAt(l)) != Character.toLowerCase(sb.charAt(r))){
                return false;
            }

            l++;
            r--;
        }

        return true;
    }

    public boolean check(char c){
        if( (c>='0' && c<='9') || (c>='a' && c<='z') || (c>='A' && c<='Z')){

            return true;
        }else{
            return false;
        }
    }
}
