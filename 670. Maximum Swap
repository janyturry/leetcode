//670. Maximum Swap
/*
Time Complexity: 
O(N), where N is the total number of digits in the input number. Every digit is considered at most once.
Space Complexity: 
O(1). The additional space used by last only has up to 10 values.
*/


class Solution {
    public int maximumSwap(int num) {
        char[] ch = Integer.toString(num).toCharArray();
        
        //index 映射
        
        int [] last = new int[10];
        //记录最靠右的数字的位置
        for(int i =0 ; i< ch.length; i++){
            last[ch[i] - '0'] = i;
        }
        
        for(int i = 0; i < ch.length; i++){
            for(int j =9 ;j > ch[i] - '0' ; j--){
                if(last[j] >i){
                    char tmp = ch[i];
                    ch[i] = ch[last[j]] ;
                    ch[last[j]] = tmp;
                    return Integer.valueOf(new String(ch));
                }
            }
        }
        
        return num;
    }
}
