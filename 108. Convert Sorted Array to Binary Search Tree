/*
Time complexity: O(N) since we visit each node exactly once.
Space complexity: O(N) to keep the output, and O(logN) for the recursion stack.
*/
 
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if(nums== null || nums.length<1){
            return null;
        }
        return helper(nums, 0, nums.length-1);
    }

    public TreeNode helper(int[] nums, int s, int e){
        if(s > e){
            return null;
        }

        int mid = s + (e-s)/2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = helper(nums,s, mid-1);
        root.right = helper(nums, mid+1, e);
        return root;
    }
}
