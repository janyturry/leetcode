/*
Analysis:
There are at most 6! permutation of the 6 numbers: 0~5. For each permustion, cost spaceO(6); String.indexOf()
and String.equals() cost time O(6). Therefore, space and time both cost 6 * 6! = 4320.
Replace the above 6 with m * n, we have:

Time & space: O(m * n * (m * n)!).
 */
class Solution {
    public int slidingPuzzle(int[][] board) {
        if(board == null || board.length < 1){
            return -1;
        }

        String target = "123450";
        String start = "";
        //0是可以移动的坐标，把坐标扁平化了，所以一下就是0处在不同位置可以移动的目标位置，例如0在INDEX 0 的时候可以移动去INDEX 1,3
        int dir [][] = new int[][]{{1,3},{0,2,4},{1,5},{0,4},{1,3,5}, {2,4}};

        for(int i= 0; i < board.length;i++){
            for(int j = 0 ;j< board[i].length;j++){
                start += board[i][j];
            }
        }

        Set<String> visited = new HashSet<>();
        Queue<String> q = new LinkedList<>();
        q.offer(start);
        visited.add(start);
        int res = 0;
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0;  i< size; i++){
                String cur = q.poll();
                if(cur.equals(target)){
                    return res;
                }
                int indexZero = cur.indexOf('0');
                for(int l : dir[indexZero]){
                    String tmp = swap(cur, indexZero, l);
                    if(visited.contains(tmp)){
                        continue;
                    }

                    visited.add(tmp);
                    q.offer(tmp);
                }

            }
            res++;
        }

        return -1;
    }

    String swap(String s, int m, int n){
        StringBuilder sb = new StringBuilder(s);
        sb.setCharAt(m, s.charAt(n));
        sb.setCharAt(n, s.charAt(m));
        return sb.toString();
    }

}
