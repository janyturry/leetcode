//652. Find Duplicate Subtrees
//leetcode


import javax.swing.tree.TreeNode;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //time: O(n^2)
    //space: O(n^2)
    //post order
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode>  res = new LinkedList<TreeNode>();
        HashMap<String , Integer> map = new HashMap<>();
        helper(root, res, map);
        return res;
    }

    public String helper(TreeNode root, List<TreeNode> res,HashMap<String, Integer> map ){
        if(root == null){
            return "#";
        }

        String serial = root.val + "," + helper(root.left, res, map) + "," +  helper(root.right, res, map);

        if(map.getOrDefault(serial, 0)==1){
            res.add(root);
        }

        map.put(serial, map.getOrDefault(serial, 0) + 1);

        return serial;

    }

    //global value numbering
    //

    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode>  res = new LinkedList<TreeNode>();
        if(root == null){
            return res;
        }


    }

    class Expression{
        int val;
        int leftNumber;
        int rightNumber;

        public Expression(int val, int leftNumber, int rightNumber){
            this.val = val;
            this.leftNumber = leftNumber;
            this.rightNumber = rightNumber;
        }
    }

    int nextNum = 1;


    public int numberNodes(TreeNode root, Map<TreeNode, Integer> nodeNumbering , Map<Expression, Integer> expressionNumbering){
        if(root ==null){
            return 0;
        }

        int leftNumber = numberNodes(root.left, nodeNumbering, expressionNumbering);
        int rightNumber = numberNodes(root.right, nodeNumbering, expressionNumbering);

        Expression expression = new Expression(root.val, leftNumber, rightNumber);
        Integer rootNumber = expressionNumbering.get(expression);

        if(rootNumber == null){
            rootNumber = nextNum;
            nextNum++;
            expressionNumbering.put(expression, rootNumber);
        }

        nodeNumbering.put(root, rootNumber);
        return rootNumber;
    }

}
