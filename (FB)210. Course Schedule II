/*
复杂度分析：
时间复杂度：
O(E+V)。这里 E 表示邻边的条数，V 表示结点的个数。初始化入度为 0 的集合需要遍历整张图，具体做法是检查每个结点和每条边，因此复杂度为
O(E+V) 然后对该集合进行操作，又需要遍历整张图中的每个结点和每条边，复杂度也为 O(E+V)；
空间复杂度:O(V)：入度数组、邻接表的长度都是结点的个数 V 即使使用队列，队列最长的时候也不会超过 V，因此空间复杂度是 O(V)。

基本思路就是建立adjant list 和数组来记录入度， 入度为0的表示没有前置需求，可以直接上课
 */

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        if (numCourses <= 0) {
            return new int[0];
        }

        HashSet<Integer>[] adj = new HashSet[numCourses];
        for (int i = 0; i < numCourses; i++) {
            adj[i] = new HashSet<>();
        }

        // [1,0] 0 -> 1
        int[] inDegree = new int[numCourses];
        for (int[] p : prerequisites) {
            adj[p[1]].add(p[0]);
            inDegree[p[0]]++;
        }

        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                queue.offer(i);
            }
        }

        int[] res = new int[numCourses];
        // 当前结果集列表里的元素个数，正好可以作为下标
        int count = 0;

        while (!queue.isEmpty()) {
            // 当前入度为 0 的结点
            Integer head = queue.poll();
            res[count] = head;
            count++;

            Set<Integer> successors = adj[head];
            for (Integer nextCourse : successors) {
                inDegree[nextCourse]--;
                // 马上检测该结点的入度是否为 0，如果为 0，马上加入队列
                if (inDegree[nextCourse] == 0) {
                    queue.offer(nextCourse);
                }
            }
        }

        // 如果结果集中的数量不等于结点的数量，就不能完成课程任务，这一点是拓扑排序的结论
        if (count == numCourses) {
            return res;
        }
        return new int[0];
    }
}






























import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
//210. Course Schedule II
//leetcode
//跟I 不一样的就是在出queue的时候加上counter来直接放进去数组里面
public class findOrder {
	public static int[] findOrder(int numCourses, int[][] prerequisites) {
		int[] res = new int[numCourses];
        // 如果没有prerequisites , 那么一定课程可以直接输出
		if (prerequisites == null || prerequisites.length == 0 || prerequisites[0].length == 0) {
			for (int i = 0; i < numCourses; i++) {
				res[i] = i;
			}
		}

		int[] inDegree = new int[numCourses];

		HashMap<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();

		for (int i = 0; i < prerequisites.length; i++) {
			inDegree[prerequisites[i][0]]++;

			if (map.containsKey(prerequisites[i][1])) {
				map.get(prerequisites[i][1]).add(prerequisites[i][0]);
			} else {
				List<Integer> tmp = new ArrayList<Integer>();
				tmp.add(prerequisites[i][0]);
				map.put(prerequisites[i][1], tmp);
			}
		}
        //直接用res  数组来记录结果, first 指向开头，每当有indegree = 0的时候， last ++, 
		int first = 0;
		int last = 0;

		for (int i = 0; i < numCourses; i++) {
			if (inDegree[i] == 0) {
				res[last++] = i;
			}
		}

		while (first < last) {
			int cur = res[first];
			List<Integer> subClass = map.get(cur);
			if (map.get(cur) != null) {
				for (int i = 0; i < subClass.size(); i++) {
					if (--inDegree[subClass.get(i)] == 0) {
						res[last++] = subClass.get(i);
					}
				}
			}
			// 相当于queue poll
			first++;
		}

		if (last != numCourses) {
			return new int[0];
		}
		return res;
	}
}
