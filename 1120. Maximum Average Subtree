import javax.swing.tree.TreeNode;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 //Time & space: O(n), n is the # of nodes in the tree.

//DFS
class Solution {
    public double maximumAverageSubtree(TreeNode root) {
        double[]  res =  helper(root);
        return res[2];
    }

    public double[] helper(TreeNode root){
        if(root == null){
            return new double[]{0,0,0,};
        }

        double [] left = helper(root.left);
        double [] right = helper(root.right);

        double numberSum = 1 + left[1] + right[1];
        double sum = root.val + left[0] + right[0];


        double maxCur = Math.max( (sum/numberSum), Math.max(left[2], right[2]));

        return new double[]{sum, numberSum, maxCur};
    }
}
