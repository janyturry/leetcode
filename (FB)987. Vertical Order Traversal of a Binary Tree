import javax.swing.tree.TreeNode;
import java.util.*;

//987. Vertical Order Traversal of a Binary Tree
//leetcode

//思路就是新建pair class, 记录x, y轴和node. root的坐标是(0, 0) ，left 节点是( x-1 , y+1), 右节点是(x+1, y+1)
//level orrder ,算出左右X的范围，  然后从左到右从map 当中拿出来计算。 因为近queue的时候已经level by level 递增,
//所以只需要关注x
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.ArrayList;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    class Point{
        int x;
        int y;
        TreeNode node;

        public Point(int x, int y, TreeNode node){
            this.x = x;
            this.y = y;
            this.node = node;
        }
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> res = new LinkedList<>();
        Map<Integer, List<Point>> map = new HashMap<>();
        Queue<Point> q = new LinkedList<>();
        q.offer(new Point(0,0,root));
        
        int max= 0;
        int min = 0;
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0 ; i < size; i++){
                Point cur = q.poll();
                max = Math.max(max, cur.x);
                min = Math.min(min, cur.x);
                
                if(!map.containsKey(cur.x)){
                    map.put(cur.x, new ArrayList<>());
                }
                map.get(cur.x).add(cur);
                
                if(cur.node.left != null){
                    q.offer(new Point(cur.x -1, cur.y+1,cur.node.left));
                }
                
                if(cur.node.right!= null){
                    q.offer(new Point(cur.x+1, cur.y+1, cur.node.right));
                }
            }
        }
        
        for(int i = min; i <=max; i++){
            Collections.sort(map.get(i), (a,b)-> a.y == b.y ? a.node.val - b.node.val : a.y - b.y);
            
            List<Integer> sub= new LinkedList<>();
            for(int j = 0; j < map.get(i).size();j++){
                sub.add(map.get(i).get(j).node.val);
            }
            res.add(sub);
        }
        return res;
    }
}
