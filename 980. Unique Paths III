/*
time Complexity: O(4^{R*C}), where R, CR,C are the number of rows and columns in the grid. (We can find tighter bounds,
but such a bound is beyond the scope of this article.)

Space Complexity: O(Râˆ—C).
*/


class Solution {
    int res;
    int empty ;

    int start_x ;
    int start_y ;
    int end_x;
    int end_y;

    public int uniquePathsIII(int[][] grid) {
        res=0;
        empty=1;

        for(int i = 0; i < grid.length; i++){
            for(int j =0; j < grid[0].length; j++){
                if(grid[i][j]== 1){
                    start_x = i;
                    start_y = j;
                }else if(grid[i][j] == 2){
                    end_x = i;
                    end_y = j;
                }else if(grid[i][j] == 0){
                    empty++;
                }
            }
        }

        helper(grid, start_x, start_y);

        return res;
    }

    public void helper(int[][] grid,int x, int y){
        if(x <0 || x >= grid.length || y <0 || y>= grid[0].length|| grid[x][y] <0 ){
            return;
        }

        if(x == end_x && y == end_y){
            if(empty == 0){
                res++;
            }
            return;
        }

        grid[x][y] = -2;
        empty--;

        helper(grid, x+1, y);
        helper(grid, x-1, y);
        helper(grid, x, y+1);
        helper(grid, x, y-1);
        empty++;
        grid[x][y] = 0;
    }
}
