
//method 1
// O(1) Build Tree + O(N) Insert:
class CBTInserter {
    TreeNode root;

    public CBTInserter(TreeNode root) {
        this.root = root;
    }

    public int insert(int v) {
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0 ; i < size; i++){
                TreeNode cur = q.poll();
                if(cur.right != null){
                    q.offer(cur.left);
                    q.offer(cur.right);
                }else{
                    if(cur.left == null){
                        cur.left = new TreeNode(v);
                        return cur.val;
                    }else{
                        cur.right = new TreeNode(v);
                        return cur.val;
                    }
                }
            }
        }
        return 0;
    }

    public TreeNode get_root() {
        return root;
    }
}




//method 2
//initial O(n), insert o(1)
class CBTInserter {
    TreeNode root;
    Queue<TreeNode> q  = new LinkedList<>();

    //INITIAL in queue only not complete parent node
    public CBTInserter(TreeNode root) {
        this.root = root;
        q = new LinkedList<>();
        q.offer(root);
        while(q.peek().right!=null){
            q.offer(q.peek().left);
            q.offer(q.peek().right);
            q.poll();
        }
    }

    public int insert(int v) {
        int res = q.peek().val ;
        if(q.peek().left == null){
            q.peek().left = new TreeNode(v);
        }else{
            q.peek().right = new TreeNode(v);
            q.offer(q.peek().left);
            q.offer(q.peek().right);
            q.poll();
        }
        return res;

    }

    public TreeNode get_root() {
        return root;
    }
}



