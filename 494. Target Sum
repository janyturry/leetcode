/*
思路
原问题是给定一些数字，加加减减，使得它们等于targert。例如，1 - 2 + 3 - 4 + 5 = target(3)。如果我们把加的和减的结合在一起，可以写成
(1+3+5)  +  (-2-4) = target(3)
-------     ------
 -> 正数    -> 负数
所以，我们可以将原问题转化为： 找到nums一个正子集和一个负子集，使得总和等于target，统计这种可能性的总数。
我们假设P是正子集，N是负子集。让我们看看如何将其转换为子集求和问题：
                  sum(P) - sum(N) = target
                  （两边同时加上sum(P)+sum(N)）
sum(P) + sum(N) + sum(P) - sum(N) = target + sum(P) + sum(N)
            (因为 sum(P) + sum(N) = sum(nums))
                       2 * sum(P) = target + sum(nums)
因此，原来的问题已转化为一个求子集的和问题： 找到nums的一个子集 P，使得
sum(P) = (target + sum(nums))/2
根据公式，若target + sum(nums)不是偶数，就不存在答案，即返回0个可能解。
 */

//time : O(nums of item  * taget)
class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        int sum = 0;
        for(int n : nums){
            sum+=n;
        }

        //nums are all positive num, sum still less than S means out of scope
        //(s+sum)%2 must be even.
        if(sum < S || (S + sum)%2 ==1 ){
            return 0;
        }

        int target = (S+sum)/2;

        int m = nums.length;
        int [][] dp = new int[m+1][target+1];

        //empty target set, only one choise is don't choose anything
        //no need to initial all dp[i][0] =1 because it will be updte in the loop
        dp[0][0] =1;


        //dp[i][j] means until ith num, there are how many ways ro get target = j
        //all dp[0][j] = 0 becuase don't select any number to get j, there is no way.
        for(int i = 1; i <= m;i++){
            for(int j = 0; j <= target;j++){
                //when looping , we can
                //#1 exclude ith num, then it equals dp[i-1][j] means don't choose the current but the target is the same.
                //2 include ith num, then we need to check the j - nums[i-1] >=0 to ensure the scope, because once include we need
                // to reduce the capacity.
                if(j - nums[i-1] >=0 ){
                    //why is nums[i-1] not nums[i-1] ? becuase we are reducing ith num, mapped to nums are nums[i-1];(nums star from 0)
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[m][target];
    }
}
