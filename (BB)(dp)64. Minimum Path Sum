// 2d array

class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int [][]res = new int[m][n];
        
        res[0][0] = grid[0][0];
        
        for(int i = 1; i < m; i++){
            res[i][0] = res[i-1][0] +   grid[i][0];
        }
        
        for(int i = 1; i < n; i++){
            res[0][i] = res[0][i-1] + grid[0][i];
        }
        
        for(int i = 1 ; i < m; i++){
            for(int j = 1; j < n; j++){
                res[i][j] = Math.min(res[i-1][j], res[i][j-1]) + grid[i][j];
            }
        }
        
        return res[m-1][n-1];
    }
}



//64. Minimum Path Sum
//DP
// 1d array

class Solution {
    public int minPathSum(int[][] grid) {
      int len = grid[0].length;
		int[] dp = new int[len];
		dp[0] = grid[0][0];
		for (int i = 1; i < len; i++) 
			dp[i]=dp[i-1]+grid[0][i];
		for (int i = 1; i < grid.length; i++) {
			dp[0] = dp[0] + grid[i][0];
			for (int j = 1; j < len; j++) 
				dp[j] = Math.min(dp[j-1]+grid[i][j], dp[j]+grid[i][j]);
		}
		return dp[len-1];  
    }
}
