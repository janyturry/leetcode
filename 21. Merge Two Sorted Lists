
//21. Merge Two Sorted Lists
//leetcode
//基本思路就是新建立一个dummy的点， 然后每次循环比较
public class mergeTwoLists {
	public class ListNode {
		int val;
		ListNode next;

		ListNode(int val) {
			this.val = val;
			this.next = null;
		}
	}

	public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
		if (l1 == null) {
			return l2;
		}

		if (l2 == null) {
			return l1;
		}
		
		ListNode dummy = new ListNode(0);
		
		ListNode cur = dummy;
		
		while(l1 != null && l2!= null){
			if(l1.val < l2.val){
				cur.next = l1;
				cur = cur.next;
				l1 = l1.next;
			}else{
				cur.next = l2;
				cur = cur.next;
				l2 = l2.next;
			}
		}
		
		while(l1 != null){
			cur.next = l1;
			cur = cur.next;
			l1 = l1.next;
		}
		
		while(l2 != null){
			cur.next = l2;
			cur = cur.next;
			l2 = l2.next;
		}
		
		return dummy.next;
	}

	
	//recursive
	/*  O(m+n)
	public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
		if (l1 == null) {
			return l2;
		}

		if (l2 == null) {
			return l1;
		}

		if (l1.val < l2.val) {
			l1.next = mergeTwoLists(l1.next, l2);
			return l1;
		} else {
			l2.next = mergeTwoLists(l1, l2.next);
			return l2;
		}
	}
	*/
}
