//322. Coin Change
//leetcode
//思路：使用DP， 首先建立一个amount+1的数组， 这样最后dp[amount] 就可以代表最后的值. dp[i] 代表的是 amount 是i 的时候需要的最少的硬币数
//然后建立两个循环
/*
设我取了一个值为5的硬币，那么由于目标值是11，所以是不是假如我们知道dp[6]，
那么就知道了组成11的dp值了？所以我们更新dp[i]的方法就是遍历每个硬币，如果遍历到的硬币值小于i值（比如我们不能用值为5的硬币去更新dp[3]）时，
我们用 dp[i - coins[j]] + 1 来更新dp[i]，所以状态转移方程为：
dp[i] = min(dp[i], dp[i - coins[j]] + 1);
 */
 
///time complexity : O(m*n)  m=amount, n = coins.length
//space complexity: O(m)
/*
coins[1,2,5]
amount = 11

amount     0 1  2  3   4  5  6 7  8  9  10 11
dp[amount] 0 1 12  12 12 12 12 12 12 12 12 12

基本思路就是从左到右循环amount, 每到一个amount，然后内部循环硬币 如果硬币面值小于AMOUNT，那么可以使用这个硬币 ,然后往左拿dp[i-coins[j]]+1
*/

import java.util.Arrays;

public class coinChange {
	public int coinChange(int[] coins, int amount) {
		int dp[] = new int[amount + 1];
		Arrays.fill(dp, amount + 1);
		dp[0] = 0;
		for (int i = 1; i <= amount; i++) {
			for (int j = 0; j < coins.length; j++) {
				if (i >= coins[j]) {
					dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);
				}
			}
		}

		return dp[amount] > amount ? -1 : dp[amount];

	}
}




//BFS


public class Solution {

    public int coinChange(int[] coins, int amount) {
        if (amount == 0) {
            return 0;
        }

        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[amount + 1];

        visited[amount] = true;
        queue.offer(amount);

        // 排序是为了加快广度优先遍历过程中，对硬币面值的遍历，起到剪枝的效果
        Arrays.sort(coins);

        int step = 1;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                Integer head = queue.poll();
                for (int coin : coins) {
                    int next = head - coin;
                    // 只要遇到 0，就找到了一个最短路径
                    if (next == 0) {
                        return step;
                    }

                    if (next < 0) {
                        // 由于 coins 升序排序，后面的面值会越来越大，剪枝
                        break;
                    }

                    if (!visited[next]) {
                        queue.offer(next);
                        // 添加到队列的时候，就应该立即设置为 true
                        // 否则还会发生重复访问
                        visited[next] = true;
                    }
                }
            }
            step++;
        }
        // 进入队列的顶点都出队，都没有看到 0 ，就表示凑不出当前面值
        return -1;
    }
}
