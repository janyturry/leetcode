
//https://leetcode-cn.com/problems/n-queens/solution/gen-ju-di-46-ti-quan-pai-lie-de-hui-su-suan-fa-si-/
/*
Time complexity :
O(N!)There is N possibilities to put the first queen, not more than N (N - 2) to put the second one,
not more than N(N - 2)(N - 4) for the third one etc. In total that results in
O(N!) time complexity.
Space complexity :
O(N*N) for board
 */

/*
基本思路就是DFS + 回溯，对每一ROW，  先检查该位置是否VALID， 然后选择一个格子放Q， 然后进行下一个ROW
一直到ROW =N ，意味着前面的ROW都拍好了我们得到解答，RETURN

 */
class Solution {
    List<List<String>> res;
    public List<List<String>> solveNQueens(int n) {
        res = new LinkedList<>();
        if(n <1){
            return res;
        }
        //初始化棋盘
        char[][] board = new char[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }
//从第0层开始
        dfs(board,0);
        return res;
    }
    //row is depth
    public void dfs(char[][] board, int row){
        //因为只有搞掂这一层才会到下一层，所以ROW到达N意味着前面的全部拍好，
        if(row == board.length){
            res.add(translate(board));
            return;
        }
//j检查同一层的每个位置能否放Q
        for(int i = 0; i < board.length; i++){
            if(valid(board, row, i)){
                board[row][i] = 'Q';
                dfs(board, row+1);
                board[row][i] = '.';
            }
        }
    }

    public boolean valid(char[][] board, int x, int y){
        //FIX COL， 检查这个列是否有Q
        //不用FIX ROW 检查COL 是因为每一行只选择一个，避免了这个问题
        for(int i = 0; i <board.length;i++){
            if(board[i][y] == 'Q'){
                return false;
            }
        }
//对角线
        for(int i = x-1 ,j = y+1; i>=0 && j<=board.length-1; i--,j++){
            if(board[i][j] == 'Q'){
                return false;
            }
        }
//对角线
        for(int i = x-1, j = y-1; i>=0 && j>=0; i--, j--){
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        return true;
    }

    public List<String> translate (char[][]board){
        List<String> sub = new LinkedList<>();
        for(int i =0; i < board.length;i++){
            sub.add(new String(board[i]));
        }
        return sub;
    }
}
