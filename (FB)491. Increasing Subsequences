class Solution {
    public List < List < Integer >> findSubsequences(int[] nums) {
        List < List < Integer >> res = new LinkedList < > ();
        if (nums == null || nums.length < 2) {
            return res;
        }

        helper(nums, new LinkedList < Integer > (), 0, res);
        return res;
    }

    public void helper(int[] nums, List < Integer > path, int start, List < List < Integer >> res) {
        if (path.size() > 1) {
            res.add(new LinkedList < Integer > (path));
        }

        HashSet < Integer > used = new HashSet < > ();
        for (int i = start; i < nums.length; i++) {
            if (used.contains(nums[i])) {
                continue;
            }
            if (path.size() == 0 || nums[i] >= path.get(path.size() - 1)) {
                used.add(nums[i]);
                path.add(nums[i]);
                helper(nums, path, i + 1, res);
                path.remove(path.size() - 1);
            }
        }
    }
}
