class Solution {
    public int lengthOfLongestSubstring(String s) {
       if(s == null || s.length() < 1){
            return 0;
        }
        int res = 0;

        Map<Character, Integer> map = new HashMap<>();
        int left = 0;
        int right = 0;
        while(right < s.length()){
            while(left <= right && map.containsKey(s.charAt(right))){
                map.remove(s.charAt(left++));
            }
            map.put(s.charAt(right) , right);
            res = Math.max(res, right - left + 1);
            right++;
        }
        return res;
    }
}




/*
Consider the input: "tmsmfdut"
for the case when i = s.length()-1.
Here, j= 2.
if you just use , map.get(s.charAt(i))+1, then j will be set to 1 and it will give wrong answer.
but it should not be updated as this value is less than current value of j = 2 or in simple words its outside of the window j=2 and i=7.
*/

// slid window

//时间复杂度：O(n)

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s == null || s.length() < 1){
            return 0;
        }
        Map<Character, Integer> map = new HashMap<>();
        
        int res = 0;
        
        for(int left = 0, right = 0; right < s.length(); right++){
            if(map.containsKey(s.charAt(right))){
                left = Math.max(left, map.get(s.charAt(right)) + 1);
            }
            map.put(s.charAt(right), right);
            res = Math.max(res, right - left + 1);
        }
        return res;
    }
}
