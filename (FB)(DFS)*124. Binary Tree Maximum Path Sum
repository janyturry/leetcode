//124. Binary Tree Maximum Path Sum
//leetcode
//每个人字形的path都可以求一下SUM 然后比较， 所以采用DFS的方法， 最后返回全局变量最大值
public class maxPathSum {
	int max = Integer.MIN_VALUE;
	public int maxPathSum(TreeNode root) {
		if(root == null){
			return 0;
		}


		dfs(root);

		return max;
	}

	//以ROOT为跟的直上直下的最大的 path sum,  单边,  return 左边+ root ， 或者 右边 + root
	public int dfs(TreeNode root){
		//求出左右单边path最大值 (包含左右点的值)
		//如果结果是小于0， 就设置为0
		//使用Math.max( dfs(root.left) , 0)  而不直接用dfs(root.left) 是因为点的VAL有可能都是负数， 如果左右儿子回复是负数的话，还不如不经过，所以直接设置为0
		
		//如果结果是小于0， 就设置为0
		int left =  root.left == null ? 0 : Math.max( dfs(root.left) , 0);
		int right =  root.right == null ? 0 : Math.max( dfs(root.right) , 0);
		//求出当前人字path的 最大sum, 因为题目说任何一个人字的path都可以,所以每个人字形都要计算一下最大值
		int cur = root.val + left + right;
		//计算一下当前人字的最大值
		max = Math.max( max, cur);
		//返回目前单边的最大值， 因为dfs()就是求单边
		return root.val + Math.max(left, right);
	}


	/*
	//不使用全局变量的版本

	 public int maxPathSum(TreeNode root) {
    	if(root == null){
    		return 0;
    	}
        //因为数组可以穿索引， 不用每次都建立COPY， 节省内存
        int[] max = new int[]{ Integer.MIN_VALUE};
    	dfs(root, max);

    	return max[0];
    }

    //以ROOT为跟的直上直下的最大的 path sum. 单边, ， return 左边+ root ， 或者 右边 + root
    public int dfs(TreeNode root, int[] max){
        int left =  root.left == null ? 0 : Math.max( dfs(root.left, max) , 0);
        int right =  root.right == null ? 0 : Math.max( dfs(root.right, max) , 0);

        int cur = root.val + left + right;

        max[0] = Math.max( max[0], cur);

        return root.val + Math.max(left, right);
    }




	 */
}








/*
时间复杂度：O(N)，其中 N 是二叉树中的节点个数。对每个节点访问不超过 2 次。
空间复杂度：O(N)，其中 N 是二叉树中的节点个数。空间复杂度主要取决于递归调用层数，最大层数等于二叉树的高度，最坏情况下，二叉树的高度等于二叉树中的节点个数。
 */

/*
基本思路就是这个路径 基本是root left + right , 基于left ,right的正负可以选择或者不选择
然后递归求解，递归返回的是单边的路径和，解释如下
 */
class Solution {
    //定义的结果全局变量， 经过某个根节点的路径的最大和（root + left + right）
    int res = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        dfs(root);
        return res;
    }

    public int dfs(TreeNode root){
        if(root == null){
            return 0;
        }
        // 递归求出最大的单边路径和
        int left = Math.max(0,dfs(root.left));
        int right  = Math.max(0, dfs(root.right));
        //每个节点都计算最大的路径和
        res =Math.max(res, root.val + left + right);
        //helper返回的是单边的路径和，因为这个方法是用来返回子树的最大路径，这个返回值是用来+ root.val的，所以
        //所以这个返回只能取一边，不然子树已经上下两边都做了，这样跟ROOT就不能构成路径了
        return root.val  + Math.max(left, right);
    }
}
