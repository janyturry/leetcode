// inorder 本来就是从小到大排序 ，所以就不需要MATH.ABS

//Solution 1 - In-Order traverse, time complexity O(N), space complexity O(1).

class Solution {
    int res =  Integer.MAX_VALUE;
    TreeNode pre;
    public int getMinimumDifference(TreeNode root) {
        if(root == null){
            return res;
        }
        
        getMinimumDifference(root.left);
        if(pre != null){
        res = Math.min(res, Math.abs(root.val - pre.val));
        }
        pre = root;
        getMinimumDifference(root.right);
        
        return res;
    }
}



class Solution {
    public int getMinimumDifference(TreeNode root) {
        int res = Integer.MAX_VALUE;
        if (root == null) {
            return res;
        }
        TreeNode pre = null;
        Deque < TreeNode > d = new LinkedList < > ();
        d.push(root);

        while (!d.isEmpty()) {
            TreeNode cur = d.peek();
            if (cur != null) {
                d.pop()
                if (cur.right != null) {
                    d.push(cur.right);
                }
                d.push(cur);
                d.push(null);
                if (cur.left != null) {
                    d.push(cur.left);
                }
            } else {
                d.pop();
                TreeNode tmp = d.pop();
                if (pre != null) {
                    res = Math.min(res, tmp.val - pre.val);
                }
                pre = tmp;
            }
        }
        return res;
    }
}
