/**
 * // This is Sea's API interface.
 * // You should not implement it, or speculate about its implementation
 * class Sea {
 *     public boolean hasShips(int[] topRight, int[] bottomLeft);
 * }
 */

class Solution {
    public int countShips(Sea sea, int[] topRight, int[] bottomLeft) {
        int x2 = topRight[0];
        int x1 = bottomLeft[0];
        int y2 = topRight[1];
        int y1 = bottomLeft[1];



        int midX = x1 + (x2-x1)/2;
        int midY = y1 + (y2- y1)/2;

        if(x1 == x2 && y1 ==y2 && sea.hasShips(topRight, bottomLeft) ){
            return 1;
            
        }
        int a = 0;
        int b = 0;
        int c = 0;
        int d = 0;


        if(midX >= x1 && midY >= y1 
        && 
        sea.hasShips( new int[]{midX, midY}, new int[]{x1,y1})
        ){
            a= countShips(sea, new int[]{midX, midY}, new int[]{x1,y1});
        }
        if(x2 >= midX + 1  && midY >= y1 
        && 
        sea.hasShips( new int[]{x2,midY},new int[]{midX+1, y1})){
            b= countShips(sea,  new int[]{x2,midY},new int[]{midX+1, y1});
        }
        if(midX >= x1 && y2>= midY + 1
         && 
         sea.hasShips(new int[]{midX,y2}, new int[]{x1, midY + 1})
         ){
            c= countShips(sea, new int[]{midX,y2},new int[]{x1, midY + 1});
        }
        if(x2 >= midX + 1  && y2 >= midY +1 
        && 
        sea.hasShips( new int[]{x2,y2}, new int[]{midX+1, midY+1})){
            d= countShips(sea, new int[]{x2,y2},new int[] {midX+1, midY+1});
        }
        return a + b + c + d;
       
    }
}
