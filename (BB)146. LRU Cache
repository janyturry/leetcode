package test;

//146. LRU Cache
//leetcode
//思路：用双向指针作为节点， 然后创建hashmap, 初始化的时候初始化头尾相连， 然后初始化capacity. get() 的时候， 检查hashmap,不存在的话直接返回-1
//存在的话,接触当前节点前后指针， 然后move to tail.
//put method, 使用get method(get 会自动接触当前前后指针并且move to tail),如果返回大于1表明存在， 只更新他的value.否则的话，先判断是否慢了size,是的话先把head的下一个remove
//然后创建一个新的node, 放到tail的前面
import java.util.HashMap;

public class LRUCache {
//定义双相连接， 记录前后指针， 还有key,val 值
class Node{
	Node prev;
	Node next;
	int key;
	int val;
	
	public Node(int key, int val){
		this.key = key;
		this.val = val;
		prev = null;
		next = null;
	}
}
    
    private HashMap<Integer, Node> map = new HashMap<Integer, Node>();
	private int capacity;
	//定义链接头尾
	private Node head = new Node(-1,-1);
	private Node tail = new Node(-1,-1);
	
	
	  public LRUCache(int capacity) {
	       //初始化容量和头尾指针
		    this.capacity = capacity;
	        head.next = tail;
	        tail.prev = head;
	    }
	    
	    public int get(int key) {
	        //如果不存在， 直接返回-1
	    	if(!map.containsKey(key)){
	        	return -1; 
	        }
	        
	    	//如果存在，解除当前存在点的前后指针
	        Node tmp = map.get(key);
	        tmp.prev.next = tmp.next;
	        tmp.next.prev = tmp.prev;
	    	//移动到链表尾部0
	        moveToTail(tmp);
	        //返回值
	        return tmp.val;
	    	
	    }
	    
	    public void put(int key, int value) {
	        //因为vlaue 都是正整数, 所以大于0 表示存在, 而且get() 方法已经自动move to tail
	    	if(get(key) >0 ){
	    		//直接设置值
	        	map.get(key).val = value;
	        	return;
	        }
	        //当内存满了, 删除第一个node
	        if(map.size() == capacity){
	        	//map.remove(key);
	        	//移除链表第一个
	        	//记住是head.next.key
	        	map.remove(head.next.key);
	        	head.next = head.next.next;
	        	head.next.prev = head;
	        }
	        
	        //新建一个表， 放到链表尾
	        Node tmp = new Node(key,value);
	        //不能忘记这一步
	        map.put(key, tmp);
	        moveToTail(tmp);
	    }
	    
	    //移动到链接尾部，tail 之前
	    public void moveToTail(Node cur){
	    	cur.prev = tail.prev;
	    	tail.prev = cur;
	    	cur.prev.next = cur;
	    	cur.next = tail;
	    }
}
