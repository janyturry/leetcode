/*
Time Complexity: O(N)O(N), where NN is the number of cells in the grid.
Space Complexity: O(N)O(N).
*/


class Solution {
	class point{
		int x;
		int y;
		public point (int x, int y){
			this.x = x;
			this.y = y;
		}
	}

    public int orangesRotting(int[][] grid) {
	if(grid == null || grid.length  < 1 || grid[0] == null || grid[0].length < 1){
		return 0;
	}		  


	int []dirX = new int[]{0,0, 1,-1};
	int []dirY = new int[]{1,-1,0,0};
	Queue<point> q = new LinkedList<>();
	int fresh_count = 0;	

	for(int i = 0 ; i < grid.length; i++){
		for(int j = 0 ; j < grid[0].length; j++){
			if(grid[i][j] == 2){
				q.offer(new point(i,j));
			}else if(grid[i][j] == 1){
				fresh_count++;	
			}
		}

	}     
        //means no fresh orange, then no need minute, then return 0
    if(fresh_count == 0){
        return 0;
    }

	int count = 0;

	while(!q.isEmpty()){
		int size = q.size();
		count++;
		for(int i = 0 ; i < size; i++){
			point cur = q.poll();
			for(int j = 0; j < 4; j++){
				int newX = cur.x + dirX[j];
				int newY = cur.y + dirY[j];
				if(newX < 0 || newX >=grid.length || newY < 0 || newY >= grid[0].length ||  grid[newX][newY] == 0 ||  grid[newX][newY] == 2  ){
					continue;
				}

				grid[newX][newY] = 2;
				q.offer(new point(newX, newY));	
				fresh_count--;

			}

		}

	}
    //means there is some orange can't be reach. then return -1
	return fresh_count==0? count-1 : -1;



    }
}
