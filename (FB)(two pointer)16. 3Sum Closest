//首先进行数组排序，时间复杂度 O(nlogn)
//整个遍历过程，固定值为 n 次，双指针为 n 次，时间复杂度为 O(n*n)
//总时间复杂度：O(nlogn)+O(n*n)=O(n*n)



class Solution {
    public int threeSumClosest(int[] nums, int target) {
        if(nums == null || nums.length < 3){
            return 0;
        } 
        
        Arrays.sort(nums);
        
        int res = nums[0] + nums[1] + nums[2];
        for(int i = 0; i <= nums.length - 3 ; i++){
            int star = i+1;
            int end = nums.length-1;
            while(star < end){
                int sum = nums[i] + nums[star] + nums[end];
                
                if(sum == target){
                    return target;
                }else if(sum  < target){
                    star++;
                }else{
                    end--;
                }
                
                if(Math.abs(res- target) > Math.abs(sum - target)){
                    res = sum;
                }
            }
        }
        return res;
    }
}
