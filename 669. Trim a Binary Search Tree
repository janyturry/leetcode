/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

/*
Time Complexity: 
O(N), where N is the total number of nodes in the given tree. We visit each node at most once.

Space Complexity: O(N). Even though we don't explicitly use any additional memory, the call stack of our recursion could be as large as the number of nodes in the worst case.
*/
class Solution {
    public TreeNode trimBST(TreeNode root, int L, int R) {
        if(root == null){
            return null;
        }

        // 因为如果根节点比LOWER BOUND 小，因为BST， 所有左子树肯定也不符合， 所以结果肯定在右子树
        if(root.val < L){
            return trimBST(root.right, L,R);
        }

        if(root.val > R){
            return trimBST(root.left, L,R);
        }

        root.left = trimBST(root.left, L,R);
        root.right = trimBST(root.right, L,R);

        return root;

    }
}
