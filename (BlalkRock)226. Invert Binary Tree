import javax.swing.tree.TreeNode;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

//DFS
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null){
            return root;
        }

        TreeNode left = root.left;
        TreeNode right = root.right;
        invertTree(left);
        invertTree(right);

        root.left = right;
        root.right = left;

        return root;
    }
}

//BFS

import javax.swing.tree.TreeNode;
import java.util.Queue;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null){
            return root;
        }

        Queue<TreeNode> q = new LinkedList<>();

        q.offer(root);

        while(!q.isEmpty()){
            TreeNode tmp = q.poll();

            TreeNode dummy = tmp.left;
            tmp.left = tmp.right;
            tmp.right = dummy;

            if(tmp.left!= null){
                q.offer(tmp.left);
            }

            if(tmp.right!= null){
                q.offer(tmp.right);
            }
        }

        return root;
    }
}
