
//Time: O(1)
//Space: O(1)
//when 0 <= arr1[i], arr2[i] <= 1000
class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        int[] count = new int[1001];
        for(int  cur : arr1){
            count[cur]++;
        }

        int i = 0;
        for(int cur: arr2){
            while(count[cur] >0){
                count[cur]--;
                arr1[i] = cur;
                i++;
            }
        }

        for(int j =0 ; j <=1000; j++){
            while(count[j]>0){
                count[j]--;
                arr1[i] = j;
                i++;
            }
        }

        return arr1;
    }
}




//Time: O(NlogN)
//Space: O(N)
//Follow-up: What if this constraint 0 <= arr1[i], arr2[i] <= 1000 doesn't exist?

class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        int[] count = new int[1001];
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for(int  cur : arr1){
            map.put(cur, map.getOrDefault(cur, 0)+1);
        }

        int i = 0;
        for(int cur: arr2){
            while(map.get(cur) >0){
                map.put(cur, map.get(cur)-1);
                arr1[i] = cur;
                i++;
            }
        }

        for(Integer cur : map.keySet()){
            while(map.get(cur) > 0){
                map.put(cur, map.get(cur)-1);
                arr1[i] = cur;
                i++;

            }
        }
        return arr1;
    }
}
