/*

时间复杂度：O(N)，因为对数组遍历了一遍，对counter 遍历了两遍。
空间复杂度：O(N)，因为 counter 在最坏情况下会跟 nums 的元素个数相等。



*/

class Solution {
    public int findShortestSubArray(int[] nums) {
        if(nums == null || nums.length < 1){
            return -1;
        }
        
        //index 0, counter,
        //intdex 1 , start index,
        //index 2, end index
        Map<Integer, List<Integer>> map = new HashMap<>();
        int degree = 1;
        int res = 1;
        for(int i = 0 ; i< nums.length ; i++){
            if(!map.containsKey(nums[i])){
                List<Integer> tmp = new ArrayList<>();
                tmp.add(1);
                tmp.add(i);
                tmp.add(i);
                map.put(nums[i], tmp);
                
            }else{
                 map.get(nums[i]).set(0,map.get(nums[i]).get(0) + 1 );
                 map.get(nums[i]).set(2,i);
            }
        }
        for(Map.Entry<Integer, List<Integer>>entry : map.entrySet()){
            List<Integer> tmp = entry.getValue();
            if(degree < tmp.get(0)){
                degree = tmp.get(0);
                res = tmp.get(2) - tmp.get(1) +1;
            }else if( degree == tmp.get(0)){
                res = Math.min(tmp.get(2) - tmp.get(1) +1,res);
            }
        }
        
        return res;
    }
}
