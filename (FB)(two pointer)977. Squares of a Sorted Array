
/*
Complexity Analysis
Time Complexity: O(N) where N is the length of A.
Space Complexity: O(N)

数组其实是有序的， 只不过负数平方之后可能成为最大数了。

那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。

此时可以考虑双指针法了，i指向其实位置，j指向终止位置。

定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。

如果A[i] * A[i] < A[j] * A[j] 那么result[k--] = A[j] * A[j]; 。
如果A[i] * A[i] >= A[j] * A[j] 那么result[k--] = A[i] * A[i]; 。
*/
//two pointer

class Solution {
    public int[] sortedSquares(int[] nums) {
        int[] res = new int[nums.length];
        int len = nums.length;
        
        if(nums == null || nums.length < 1){
            return res;
        }
        
        int s = 0;
        int e = len-1;
        int resIndex = len-1;
        
        while(s <= e){
            if(Math.abs(nums[s]) >  Math.abs(nums[e])){
                res[resIndex] = nums[s]*nums[s];  
                s++;
            } else{
                res[resIndex] = nums[e]*nums[e];  
                e--;
            }
            resIndex--;
            
        }
        return res;
    }
}
