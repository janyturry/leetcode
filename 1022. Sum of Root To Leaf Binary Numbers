//base 2 to base 10
//2^n * nth bit + 2^n-1 * n-1th bit + ... + 2^0 * 0th bit     ->>>>>>>>
// [2 * (parentSumNode) + Current Bit] //executed every time the function iterates from root to leaf.


//因为最左边的位置是 2^0 * bitval ,也就是 bit
class Solution {
    public int sumRootToLeaf(TreeNode root) {
        return dfs(root, 0);
    }

    public int dfs(TreeNode root, int sum){
        if(root == null){
            return 0;
        }

        sum = sum*2 + root.val;

        if(root.left == null && root.right == null){
            return sum;
        }else {
            return dfs(root.left, sum) + dfs(root.right, sum);
        }

    }
}
