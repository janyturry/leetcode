//所以定义状态转移数组dp[天数][当前是否持股][卖出的次数]

/*
复杂度分析：

时间复杂度：O(N)，这里 N表示股价数组的长度；
空间复杂度：O(N)，虽然是三维数组，但是第二维、第三维是常数，与问题规模无关。
*/
class Solution {
    public int maxProfit(int[] prices) {
        int len = prices.length;
        if (len < 2) {
            return 0;
        }

       
        int[][][] dp = new int[len][2][3];
        //第一天休息
        dp[0][0][0] = 0;
        //这里为什么+10000， 因为 在下面dp[i-1][0][1] - prices[i] 可能会溢出，这是根据测试用例调整的
        //一天不可能已经有卖出
        dp[0][0][1] = Integer.MIN_VALUE + 100000;
        dp[0][0][2] = Integer.MIN_VALUE;
        dp[0][1][0] = -prices[0];
        //第一天不可能已经卖出
        dp[0][1][1] = Integer.MIN_VALUE;
        dp[0][1][2] = Integer.MIN_VALUE;
        for (int i = 1; i < len; i++) {
            //未持股，未卖出过，说明从未进行过买卖
            dp[i][0][0] = 0;
            //未持股，卖出过1次，可能是今天卖的，可能是之前卖的
	        dp[i][0][1] = Math.max(dp[i-1][0][1],  dp[i-1][1][0] + prices[i]);
            //未持股，卖出过2次，可能是今天卖的，可能是之前卖的
	        dp[i][0][2] = Math.max(dp[i-1][0][2],  dp[i-1][1][1] + prices[i]);
            //持股，未卖出过，可能是今天买的，可能是之前买的
	        dp[i][1][0] = Math.max(dp[i-1][1][0], dp[i-1][0][0] - prices[i]);
            //持股，卖出过1次，可能是今天买的，可能是之前买的
	        dp[i][1][1] = Math.max(dp[i-1][1][1], dp[i-1][0][1] - prices[i]);
            //持股，卖出过2次，不可能
            dp[i][1][2] = Integer.MIN_VALUE;
        }
        return Math.max(0,Math.max(dp[len-1][0][1], dp[len-1][0][2]));
    }
}
