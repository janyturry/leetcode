/*

he idea is to change 0 in the original array to -1. Thus, if we find SUM[i, j] == 0 then we know there are even number of -1 and 1
between index i and j.
 Also put the sum to index mapping to a HashMap to make search faster.
基本概念是sum 相同的区间表示 0和 1平衡了， 因为思考曲线 先增加后减少然后相等， 也就是平衡
 */
class Solution {
    public int findMaxLength(int[] nums) {
        Map<Integer, Integer> map  = new HashMap<>();
//处理的corner case 是 整个数组都是平衡的
        map.put(0, -1);

        int sum = 0;
        int max = 0;

        for(int i = 0 ; i < nums.length; i++){
            if(nums[i] == 0){
                nums[i] = -1;
            }

            sum+= nums[i];
            if(map.containsKey(sum)){
                max = Math.max(max , i-map.get(sum));
            }else{
                map.put(sum, i);
            }
        }

        return max;
    }
}
