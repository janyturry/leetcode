/*
Given numbers [2, 3, 4, 5], regarding the third number 4, the product of array except 4 is 2*3*5 which consists of two parts: left 2*3 and right 5. The product is left*right. We can get lefts and rights:

        Numbers:     2    3    4     5
        Lefts:            2  2*3 2*3*4
        Rights:  3*4*5  4*5    5
        Let’s fill the empty with 1:

        Numbers:     2    3    4     5
        Lefts:       1    2  2*3 2*3*4
        Rights:  3*4*5  4*5    5     1
        We can calculate lefts and rights in 2 loops. The time complexity is O(n).

        We store lefts in result array. If we allocate a new array for rights. The space complexity is O(n). To make it O(1), we just need to store it in a variable which is right in @lycjava3’s code.
*/

//time :O(n)
//space: constant
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int len = nums.length;
        int[] res = new int[len];
        //left product
        int left = 1;

        for(int i =0; i < len;i++){
            if(i!=0){
                left = left* nums[i-1];
                res[i] = left;
            }else {
                res[i] = 1;
            }
        }

        int right = 1;
        for(int i = len-1; i>=0 ; i--){
            if(i != len-1){
                right = right * nums[i+1];
                res[i]  = right * res[i];
            }
        }
        return res;
    }
}
