
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
//56. Merge Intervals
//leetcode
//基本思路是先从小到大把interval排序了，然后loop一遍,如果last.end 大于 cur.start的，更新last.end
//Sorting takes O(n log(n)) and merging the intervals takes O(n). So, the resulting algorithm takes O(n log(n)).
time: O(n*logn)
space: O(n)
public class mergeIntervals {
	public class Interval {
		int start;
		int end;

		Interval() {
			start = 0;
			end = 0;
		}

		Interval(int s, int e) {
			start = s;
			end = e;
		}
	}

	public List<Interval> merge(List<Interval> intervals) {
		 List<Interval> res=  new ArrayList<Interval>();
	        if(intervals == null || intervals.size() == 0){
	            return intervals;
	        }
	        
	        Collections.sort(intervals, new Comparator<Interval>(){
	        	//要写public
	            public int compare(Interval a, Interval b){
	                if(a.start == b.start){
	                    return (a.end - b.end);
	                }else{
	                    return (a.start - b.start);
	                }
	            }
	        });
	        
	        Interval last  = null;
	        for(Interval i :intervals ){
	            if(last == null || last.end < i.start){
	                res.add(i);
	                last = i;
	            }else{
	            	//修改已经加进去的
	                last.end = Math.max(last.end, i.end);
	            }
	        }
	        
	        return res;
	            
	}
	
	
	/*
	The idea is to sort the intervals by their starting points. Then, we take the first interval and compare its end with the next intervals starts.
	As long as they overlap, we update the end to be the max end of the overlapping intervals.
	Once we find a non overlapping interval, we can add the previous "extended" interval and start over.
	*/
	
	//updated version
	class Solution {
    public int[][] merge(int[][] intervals) {
        int size = intervals.length;
        if(size <=1){
            return intervals;
        }

        Arrays.sort(intervals, (a,b)-> a[0] - b[0]);
        List<int[]> res = new LinkedList<>();

        int s = intervals[0][0];
        int e = intervals[0][1];
        
        for(int i =1; i <size; i++){
            if(e >= intervals[i][0]){
                e = Math.max(e, intervals[i][1]);
            }else{
                res.add(new int[]{s,e});
                s = intervals[i][0];
                e = intervals[i][1];
            }
        }
        res.add(new int[]{s,e});
        return res.toArray(new int[res.size()][]);
    }
}
