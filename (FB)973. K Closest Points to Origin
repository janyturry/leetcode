/*
时间复杂度：期望为 O(n)，其中 n 是数组 points 的长度。由于证明过程很繁琐，所以不再这里展开讲。具体证明可以参考《算法导论》第 9 章第 2 小节。
最坏情况下，时间复杂度为
O(n*n)。具体地，每次的划分点都是最大值或最小值，一共需要划分 n−1 次，而一次划分需要线性的时间复杂度，所以最坏情况下时间复杂度为 O(n*n)。

 因为我们是要找下标为k的元素，第一次切分的时候需要遍历整个数组 (0 ~ n) 找到了下标是 j 的元素，假如 k 比 j 小的话，
 那么我们下次切分只要遍历数组 (0~j-1)的元素就行啦，反之如果 k 比 j 大的话，那下次切分只要遍历数组 (j+1～n) 的元素就行啦，
 总之可以看作每次调用 partition 遍历的元素数目都是上一次遍历的 1/2，因此时间复杂度是 N + N/2 + N/4 + ... + N/N = 2N, 因此时间复杂度是 
O(N)。


空间复杂度：期望为 O(logn)，即为递归调用的期望深度。
最坏情况下，空间复杂度为
O(n)，此时需要划分 n−1 次，对应递归的深度为 n−1 层，所以最坏情况下时间复杂度为 O(n)。

Theoretically, the average time complexity is O(N) , but just like quick sort, in the worst case, this solution would be degenerated to O(N^2), and pratically, the real time it takes on leetcode is 15ms.

The advantage of this solution is it is very efficient.
The disadvatage of this solution are it is neither an online solution nor a stable one. And the K elements closest are not sorted in ascending order.

 */

/*
下面表述的，用于比较大小的“元素”，都指的是坐标到原点的距离。

用快排的思路，将小的排在前面，选一个主元元素作为pivot，将数组分为两部分：

小于等于 pivot 的元素
大于 pivot 的元素
我们把数组最左项作为 pivot，安排两个首尾指针：

如果左指针元素 <= pivot，是ok的，左指针右移，看下一个。
如果右指针元素 > pivot，也是ok的，右指针左移，看下一个。
如果左指针元素 > pivot，右指针元素 <= pivot，则小的应该到前面来，它们交换位置，指针同时收缩1，看下一个元素。
直到双指针交错，循环结束，此时左边都是小于等于 pivot 的，右边都是大于 pivot 的。

别忘了：将 pivot 元素与当前右指针元素交换，交换后，pivot 元素来到右指针的位置，它的左边都是小于等于它的，它的位置，是继续分治的位置。

然后来到判断：

如果右指针索引 right == K，则说明 right 的左边有 K 个元素，已经排好了。
如果 right < K，说明 right 左边不足 K 个元素，说明右边的序列有些小的没排前面来，继续递归排。
如果 right > K，说明 right 左边多于 K 个元素，说明左边的序列还没排好，继续递归排。
*/



//https://leetcode-cn.com/problems/k-closest-points-to-origin/solution/xiang-jie-kuai-pai-si-lu-973-zui-jie-jin-yuan-dian/
//时间复杂度平均是O(n)，效率更高
class Solution {
    public int[][] kClosest(int[][] points, int K) {
        if(points == null || points.length<1){
            return new int[][]{};
        }
        helper(points, 0,points.length-1, K);
        return Arrays.copyOfRange(points, 0, K);
    }

    private void helper(int[][] points, int start, int end, int K) {
        int[] pivot = points[start];
        int l = start, r = end;
        while (l <= r) {
            if (compare(points[l], pivot) <= 0){
                l++;
                continue;
            }
            if (compare(points[r], pivot) > 0){
                r--;
                continue;
            }
            swap(points,l,r);
            l++;
            r--;


        }
        swap(points,start,r);
        if(r == K-1){
            return;
        }else if(r< K-1){
            helper(points, r+1, end,K);
        }else{
            helper(points, start, r-1,K);
        }
    }

    private int compare(int[] p1, int[] p2) {
        return p1[0] * p1[0] + p1[1] * p1[1] - p2[0] * p2[0] - p2[1] * p2[1];
    }

    public void swap(int[][] nums, int x, int y) {
        int[]temp = nums[x];
        nums[x] = nums[y];
        nums[y] = temp;
    }

    public static void main(String[] argc){
        int[] test = new int[]{1,1,3};
        permuteUnique(test);
    }
}



class Solution {
    public int[][] kClosest(int[][] points, int K) {
        // 使用快速选择（快排变形） 获取 points 数组中距离最小的 K 个点（第 4 个参数是下标，因此是 K - 1）
        return quickSelect(points, 0, points.length - 1, K - 1);
    }

    private int[][] quickSelect(int[][] points, int lo, int hi, int idx) {
        if (lo > hi) {
            return new int[0][0];
        }
        // 快排切分后，j 左边的点距离都小于等于 points[j], j 右边的点的距离都大于等于 points[j]。
        int j = partition(points, lo, hi);
        // 如果 j 正好等于目标idx，说明当前points数组中的[0, idx]就是距离最小的 K 个元素
        if (j == idx) {
            return Arrays.copyOf(points, idx + 1);
        }
        // 否则根据 j 与 idx 的大小关系判断找左段还是右段
        return j < idx? quickSelect(points, j + 1, hi, idx): quickSelect(points, lo, j - 1, idx);
    }

    private int partition(int[][] points, int lo, int hi) {
        int[] v = points[lo];
        int dist = v[0] * v[0] + v[1] * v[1];
        int i = lo, j = hi + 1;
        while (true) {
            while (++i <= hi && points[i][0] * points[i][0] + points[i][1] * points[i][1] < dist);
            while (--j >= lo && points[j][0] * points[j][0] + points[j][1] * points[j][1] > dist);
            if (i >= j) {
                break;
            }
            int[] tmp = points[i];
            points[i] = points[j];
            points[j] = tmp;
        }
        points[lo] = points[j];
        points[j] = v;
        return j;
    }
}







/*

时间复杂度：
O(nlogK)，其中 n 是数组 points 的长度。由于优先队列维护的是前K 个距离最小的点，
因此弹出和插入操作的单次时间复杂度均为 O(logK)。在最坏情况下，数组里 n 个点都会插入，因此时间复杂度为 O(nlogK)。

空间复杂度：O(K)，因为优先队列中最多有 K 个点。

Theoretically, the time complexity is O(NlogK), but pratically, the real time it takes on leetcode is 134ms.
The advantage of this solution is it can deal with real-time(online) stream data. It does not have to know the size of the data previously.
The disadvatage of this solution is it is not the most efficient solution.


 */
class Solution {
    public int[][] kClosest(int[][] points, int K) {
        PriorityQueue<int[]> p  =new PriorityQueue<>( (a, b)-> b[0]*b[0] + b[1]*b[1] - a[0]*a[0] - a[1]*a[1]);

        for(int [] tmp : points){
            p.offer(tmp);
            while(p.size()>K){
                p.poll();
            }
        }

        int [][] res = new int[K][2];
        for(int i = K-1; i >=0 ; i--){
            res[i] = p.poll();
        }

        return res;

    }
}

