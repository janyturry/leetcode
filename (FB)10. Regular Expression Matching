
//10. Regular Expression Matching
//leetcode
////dp[i][j] 表示从s去i个字符，p中取j个字符， 从左到右.i , j 是字符数 dp[2][3]   s = "abcde"  p = "ghjklo"   

public class isMatch {
	 public boolean isMatch(String s, String p) {
		 if(s== null || p == null){
			 return false;
		 }
		 boolean dp [][] = new boolean [s.length()+1][p.length()+1];
		 //初始化两个dp[0][0]代表两个都是以空字符开始，所以肯定是true
		 dp[0][0] = true;
		 //S是空字符， P的*前面肯定要跟一个字符， 所以不会出现在第一个位置,S为空的情况下，P需要匹配空值，所以
		 //*前面的字符要变成空，那个真假值就要看*前前面
		 for(int i =1 ; i <= p.length(); i++){
			 if(p.charAt(i-1) == '*'){
			     dp[0][i] = dp[0][i-2];
			 }
		 }
		 
		 for(int i = 1; i <=s.length(); i++){
			 for(int j = 1 ; j <= p.length(); j++){
				 //数值匹配的情况
				 if(s.charAt(i-1) == p.charAt(j-1) || (p.charAt(j-1) == '.')){
					 dp[i][j] = dp[i-1][j-1]; 
				 //
				 }else if(p.charAt(j-1) == '*'){
					 //*前面字符跟S最后的字符匹配到， 那么有两种情况， 情况1是*和前面字符为空， 情况2是整个P跟S一直到倒数第二个匹配上
					 if(p.charAt(j-2) == s.charAt(i-1) || p.charAt(j-2) == '.'){
					     dp[i][j] = dp[i-1][j] || dp[i][j-2];         	 
					 }else{
						 //*跟前面的数值为空
						 dp[i][j] = dp[i][j-2];
					 }
				 }
			 }
		 }
		 return dp[s.length()][p.length()];
	 }
}



/*
time complexity: O(m*n)
space complexity: O(m*n)

 */
class Solution {
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();

        boolean[][] dp  = new boolean[m+1][n+1];
        //两个都取空集，肯定是TRUE可以匹配
        dp[0][0] = true;
        //因为当S为空集， 如果P 碰到* ， 那么两个还是有可能哦、匹配到的， P 前一个字母变成空 .
        for(int i = 1; i<=n;i++){
            if(p.charAt(i-1) == '*'){
                dp[0][i] = dp[0][i-2];
            }
        }

        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n;j++){
                if(s.charAt(i-1) == p.charAt(j-1) || p.charAt(j-1) == '.'){
                    dp[i][j] = dp[i-1][j-1];
                }else if(p.charAt(j-1) == '*'){
                    //S的当前字幕和P的前一个字母不一样， 唯一的可能就是* repeat 0 time, 让P 当前字母的前一个字母变成空
                    if(p.charAt(j-2) != s.charAt(i-1) && p.charAt(j-2) != '.'){
                        dp[i][j] = dp[i][j-2];
                    }else{
                        // repeat 0 times || repeat 1 time || repeat more times
                        dp[i][j] = dp[i][j-2] || dp[i][j-1] || dp[i-1][j];
                    }
                }
            }
        }
        return dp[m][n];
    }
}
