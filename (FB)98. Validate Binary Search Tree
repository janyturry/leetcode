
import java.util.Stack;
//98. Validate Binary Search Tree
//leetcode
//归纳了使用inorder解决树的问题
//https://discuss.leetcode.com/topic/46016/learn-one-iterative-inorder-traversal-apply-it-to-multiple-tree-questions-java-solution
//思路： 中序遍历BST就是小中大， ,BST 的 特征也是刚好 < , = , > 所以一旦current <=之前那个pre, 就要return false



class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root == null){
            return true;
        }
        
        Deque<TreeNode> q = new LinkedList<>();
        TreeNode pre = null;
        q.push(root);
        
        while(!q.isEmpty()){
            TreeNode cur = q.peek();
            
            if(cur != null){
                q.pop();
                
                if(cur.right != null){
                    q.push(cur.right);
                }
                
                q.push(cur);
                q.push(null);
                if(cur.left != null){
                    q.push(cur.left);
                }
            }else{
                q.pop();
                TreeNode tmp = q.pop();
                if(pre != null && tmp.val <= pre.val){
                    return false;
                }
                pre = tmp;
            }
            
        }
        return true;
    }
}


public class isValidBST {
	public class TreeNode {
		int val;
		TreeNode left;
		TreeNode right;

		TreeNode(int x) {
			val = x;
		}
	}

	public boolean isValidBST(TreeNode root) {
		if (root == null) {
			return true;
		}

		Stack<TreeNode> stack = new Stack<TreeNode>();
		while (root != null) {
			stack.push(root);
			root = root.left;
		}
		TreeNode pre = null;
		TreeNode cur = null;
		while (!stack.isEmpty()) {
			TreeNode node = stack.pop();
			cur = node;

			if (pre != null && cur.val <= pre.val) {
				return false;
			}

			pre = cur;
			if (node.right != null) {
				node = node.right;
				while (node != null) {
					stack.push(node);
					node = node.left;
				}
			}
		}
		return true;
	}
}



//中序遍历， 注意这个中序遍历的模板
/*
时间复杂度 : O(n)，其中 n为二叉树的节点个数。二叉树的每个节点最多被访问一次，因此时间复杂度为 O(n)。
空间复杂度 : O(n)，其中 n 为二叉树的节点个数。栈最多存储 n个节点，因此需要额外的 O(n) 的空间。
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root == null){
            return false;
        }

        Deque<TreeNode> stack= new LinkedList<>();
        TreeNode pre = null;

        while(!stack.isEmpty() || root != null){
            while(root != null){
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            //如果中序遍历得到的节点的值小于等于前一个，说明不是二叉搜索树
            if(pre != null && pre.val >= root.val){
                return false;
            }
            pre = root;
            root = root.right;
        }
        return true;
    }
}
