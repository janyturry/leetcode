class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> res = new LinkedList<>();
        
        if(n <1 ){
            return res;
        }
        
        if(n == 1){
            res.add(0);
            return res;
        }
        
        Queue<Integer> q = new LinkedList<>();
        List<Set<Integer>> adj = new ArrayList<>();
        int[] degree = new int[n];
  
        for(int i = 0 ; i < n; i++){
            adj.add(new HashSet<Integer>());
        }
                
        for(int[] i : edges){
            degree[i[0]]++;
            degree[i[1]]++;
            adj.get(i[0]).add(i[1]);
            adj.get(i[1]).add(i[0]);
        }
        
        for(int i = 0 ; i <  adj.size() ; i++){
            if(adj.get(i).size() ==1){
                q.offer(i);
            }
        }
        
        while(!q.isEmpty()){
            int size = q.size();
            res = new ArrayList<>();
            for(int i = 0 ; i < size; i++){
                int cur = q.poll();
                res.add(cur);
            
                Set<Integer> set = adj.get(cur); 
                for(int s : set){
                    degree[s]--;
                    if(degree[s]== 1){
                        q.offer(s);
                    }
                }
            }
            
            
        }
        return res;
        
    }
}
