
import java.util.Stack;

//445. Add Two Numbers II
//leetcode
//思路： 新建一个head node, 然后两个stack一直pop出来计算结果
public class addTwoNumbers2 {
	public class ListNode {
		int val;
		ListNode next;

		ListNode(int x) {
			val = x;
		}
	}

	public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		Stack<Integer> s1 = new Stack<Integer>();
		Stack<Integer> s2 = new Stack<Integer>();

		while (l1 != null) {
			s1.push(l1.val);
			l1 = l1.next;
		}

		while (l2 != null) {
			s2.push(l2.val);
			l2 = l2.next;
		}

		ListNode head = new ListNode(0);
		int sum = 0;

		while (!s1.isEmpty() || !s2.isEmpty()) {
			if (!s1.isEmpty()) {
				sum = sum + s1.pop();
			}

			if (!s2.isEmpty()) {
				sum = sum + s2.pop();
			}

			head.val = sum % 10;

			ListNode tmp = new ListNode(sum / 10);
			tmp.next = head;
			head = tmp;
			//得出进位下次继续加
			sum = sum / 10;
		}
		return head.val == 0 ? head.next : head;
	}
}
