
//method1 BFS
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> word = new HashSet<>(wordList);
        Set<String> visited = new HashSet<>();
        visited.add(beginWord);

        int step = 1;

        Queue<String> q = new LinkedList<>();
        q.add(beginWord);

        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0 ; i< size; i++){
                String cur = q.poll();
                char[] curArray = cur.toCharArray();
                for(int j = 0 ; j < curArray.length; j++){
                    char tmp  = curArray[j];

                    for(char c = 'a'; c<='z'; c++){
                        if(c == tmp){
                            continue;
                        }
                        curArray[j] = c;

                        String newStr = new String(curArray);

                        if(word.contains(newStr)){
                            if(newStr.equals(endWord)){
                                return step +1;
                            }

                            if(!visited.contains(newStr)){
                                visited.add(newStr);
                                q.offer(newStr);
                            }
                        }
                    }
                    curArray[j] = tmp;
                }
            }
            step++;
        }
        return 0;
    }
}




//双向BFS
public class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        // 第 1 步：先将 wordList 放到哈希表里，便于判断某个单词是否在 wordList 里
        Set<String> wordSet = new HashSet<>(wordList);
        //双向BFS 不能去掉!wordSet.contains(endWord)， 不然会有CASE不通过
        if (wordSet.size() == 0 || !wordSet.contains(endWord)) {
            return 0;
        }

        // 第 2 步：已经访问过的 word 添加到 visited 哈希表里
        Set<String> visited = new HashSet<>();
        visited.add(beginWord);
        visited.add(endWord);
        // 分别用左边和右边扩散的哈希表代替单向 BFS 里的队列，它们在双向 BFS 的过程中交替使用
        Set<String> beginVisited = new HashSet<>();
        beginVisited.add(beginWord);
        Set<String> endVisited = new HashSet<>();
        endVisited.add(endWord);

        // 第 3 步：执行双向 BFS，左右交替扩散的步数之和为所求
        int step = 1;
        while (!beginVisited.isEmpty() && !endVisited.isEmpty()) {
            // 优先选择小的哈希表进行扩散，考虑到的情况更少
            if (beginVisited.size() > endVisited.size()) {
                Set<String> temp = beginVisited;
                beginVisited = endVisited;
                endVisited = temp;
            }

            // 逻辑到这里，保证 beginVisited 是相对较小的集合，nextLevelVisited 在扩散完成以后，会成为新的 beginVisited
            Set<String> nextLevelVisited = new HashSet<>();
            for(String w : beginVisited){
                char[] curArray = w.toCharArray();
                for(int i = 0; i < w.length(); i++){
                    char tmp = curArray[i];
                    for(char c = 'a'; c<='z'; c++){
                        if(c == tmp){
                            continue;
                        }
                        curArray[i] = c;
                        String newStr = new String(curArray);

                        if(wordSet.contains(newStr)){
                            if(endVisited.contains(newStr)){
                                return step+1;
                            }

                            if(!visited.contains(newStr)){
                                visited.add(newStr);
                                nextLevelVisited.add(newStr);
                            }
                        }
                    }
                    curArray[i] = tmp;
                }

            }
            // 原来的 beginVisited 废弃，从 nextLevelVisited 开始新的双向 BFS
            beginVisited = nextLevelVisited;
            step++;
        }
        return 0;
    }
}
