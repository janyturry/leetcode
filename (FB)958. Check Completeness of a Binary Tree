
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

/*
若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，
第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。（注：第 h 层可能包含 1~ 2h 个节点。）


 */


/*

层序遍历

思路：把一颗树的节点（包括空节点）按层序遍历排成一行，当且仅当存在两个相邻节点：前一个为null，后一个不为null时，才不是不是完全二叉树。
如：


       1
      / \
     2   3
    / \   \
   4   5   6
层序遍历序列为：[1, 2, 3, 4, 5, null, 6]，其中 null 出现在了6前面，所以不合法


*/
class Solution {
    public boolean isCompleteTree(TreeNode root) {
        if(root == null){
            return false;
        }
        
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        //记录PRE 节点
        TreeNode pre = root;
        while(!q.isEmpty()){
            TreeNode cur = q.poll();
            if(pre == null && cur != null){
                return false;
            }else{
                if(cur != null){
                    q.offer(cur.left);
                    q.offer(cur.right);
                }
            }
            pre = cur;
        }
        return true;
    }
}



When level-order traversal in a complete tree, after the last node, all nodes in the queue should be null.
Otherwise, the tree is not complete.

Time Complexity: O(N), where N is the number of nodes.
Space Complexity: O(N)
 */
class Solution {
    public boolean isCompleteTree(TreeNode root) {
        boolean res =  false;

        Queue<TreeNode> q = new LinkedList<>();

        q.offer(root);

        while(q.size()>0){
            TreeNode cur = q.poll();

            if(cur == null){
                res = true;
            }else{
                if(res){
                    return false;
                }
                //这里无论cur.left, cur.right是不是NULL都需要入栈， 目的就是把全部点弄进去queue
                q.offer(cur.left);
                q.offer(cur.right);

            }
        }

        return res;
    }
}
