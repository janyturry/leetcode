//4. Median of Two Sorted Arrays
//leetcode
/*
 index : 0  1  2  3  4  5  6  7
 L1  R1
 num1 : 3 5 | 8   9      cut1 : 左边有几个元素
 num2 : 1 2   7 | 10  11  12
 L2   R2
 */
//思路定义出所有变量就能出来， （1） 首先找出cut1 = 0和cut2 = 0,表示左边有多少个数， 
//然后定义cutL和cutR来控制 cut1的位置, 然后分别定义L1,L2,R1,R2来表示中位数，然后分情况讨论
//改变cutL和cutR.
//复杂度  log(min(m,n))
public class findMedianSortedArrays {
	public double findMedianSortedArrays(int[] nums1, int[] nums2) {
		if (nums1.length > nums2.length) {
			return findMedianSortedArrays(nums2, nums1);
		}

		int m = nums1.length;
		int n = nums2.length;
		int cut1 = 0;
		int cut2 = 0;

		int cutL = 0;
		int cutR = nums1.length;

		while (cut1 <= nums1.length) {
			cut1 = cutL + (cutR - cutL) / 2;
			cut2 = (m + n) / 2 - cut1;

			double L1 = cut1 == 0 ? Integer.MIN_VALUE : nums1[cut1 - 1];
			double L2 = cut2 == 0 ? Integer.MIN_VALUE : nums2[cut2 - 1];
			double R1 = cut1 == nums1.length ? Integer.MAX_VALUE : nums1[cut1];
			double R2 = cut2 == nums2.length ? Integer.MAX_VALUE : nums2[cut2];

			if (L1 > R2) {
				cutR = cut1 - 1;
			} else if (L2 > R1) {
				cutL = cut1 + 1;
			} else {
				if ((m + n) % 2 == 0) {
					L1 = L1 > L2 ? L1 : L2;
					R1 = R1 < R2 ? R1 : R2;
					return (L1 + R1) / 2;
				} else {
					return R1 > R2 ? R2 : R1;
				}
			}
		}
		return 0;
	}
}
