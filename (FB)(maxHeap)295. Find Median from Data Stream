//https://leetcode.cn/problems/find-median-from-data-stream/solution/gong-shui-san-xie-jing-dian-shu-ju-jie-g-pqy8/

/*
时间复杂度：addNum 函数的复杂度为 
O(logn)
findMedian 函数的复杂度为 O(1)
空间复杂度：O(n)
*/

class MedianFinder {
    PriorityQueue<Integer> l ;
    PriorityQueue<Integer> r ;


    public MedianFinder() {
        l = new PriorityQueue<>((a,b)->(b-a));
        r = new PriorityQueue<>((a,b)->(a-b));
    }
    
    public void addNum(int num) {
        int sizeL = l.size();
        int sizeR = r.size();
        
        if(sizeL == sizeR){
            if(sizeR == 0){
                l.offer(num);
            }else{
                if(num >= r.peek()){
                    // l.offer(r.poll());
                    // r.offer(num);
                    r.offer(num);
                    l.offer(r.poll());
                }else{
                    l.offer(num);
                }
            }
        }else{
            if(num >= l.peek()){
                 r.offer(num);
            }else{
                // r.offer(l.poll());
                // l.offer(num);
                 l.offer(num);
                    r.offer(l.poll());
            }
        }
    }
    
    public double findMedian() {
         int sizeL = l.size();
         int sizeR = r.size();
         if(sizeL == sizeR){
             return (l.peek() + r.peek())/2.0;
        }else{
             return (double)l.peek();
         }
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */




/*
时间复杂度：O(logN)，优先队列的出队入队操作都是对数级别的，数据在两个堆中间来回操作是常数级别的，
综上时间复杂度是 O(logN) 级别的；
空间复杂度：O(N)，使用了2个辅助空间，其中两个堆的空间复杂度是N/2
*/
//maxheap
//最大堆
//https://leetcode-cn.com/problems/find-median-from-data-stream/solution/you-xian-dui-lie-python-dai-ma-java-dai-ma-by-liwe/
/*
基本思路就是使用最大堆最小堆， 保证最大堆元素>=最小堆， 因为中位数我们只关心最中间的两个
*/
class MedianFinder {
    /** initialize your data structure here. */    
    PriorityQueue<Integer> maxH;
    PriorityQueue<Integer> minH;

    public MedianFinder() {
        maxH = new PriorityQueue<>((a,b)-> (b-a));
        minH = new PriorityQueue<>();
    }
    
    public void addNum(int num) {
        //先加入maxH,再加入minH, 是为了保证新加入的num加入到正确的位置队列，maxH.offer(num)- > minH.offer(maxH.poll()) 保证了加入到minH 是在MAX 里面是最大的数字.
        maxH.offer(num);
        minH.offer(maxH.poll());
        if(maxH.size()< minH.size()){
            maxH.offer(minH.poll());
        }
    }
    
    public double findMedian() {
        if(minH.size() == maxH.size()){
            return  (minH.peek() + maxH.peek())/2.0;
        }else{
            return (double) maxH.peek();
        }
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
