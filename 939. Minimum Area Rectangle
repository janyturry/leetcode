
/*
Time Complexity: O(N^2), where N is the length of points.

Space Complexity: O(N), where H is the height of the tree.

 */
class Solution {
    public int minAreaRect(int[][] points) {
        Map<Integer, Set<Integer>> map = new HashMap<>();

        for(int [] p  :  points){
            map.putIfAbsent(p[0], new HashSet<Integer>());
            map.get(p[0]).add(p[1]);
        }

        int min = Integer.MAX_VALUE;
        for(int i =0 ; i < points.length; i++){
            for(int j = i+1 ; j < points.length;j++){
                if(points[i][0] == points[j][0] || points[i][1] == points[j][1]){
                    continue;
                }

                if(map.get(points[i][0]).contains(points[j][1]) && map.get(points[j][0]).contains(points[i][1])){
                    min = Math.min(min, Math.abs(points[i][0] - points[j][0])* Math.abs(points[i][1]- points[j][1]));
                }

            }
        }

        return min== Integer.MAX_VALUE? 0 : min;

    }
}
