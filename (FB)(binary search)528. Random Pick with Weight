/*
Time Complexity:
For the constructor function, the time complexity would be O(N), which is due to the construction of the prefix sums.

For the pickIndex() function, this time its time complexity would be O(logN), since we did a binary search on the prefix sums.

Space Complexity

For the constructor function, the space complexity remains O(N), which is again due to the construction of the prefix sums.

For the pickIndex() function, its space complexity would O(1), since it uses constant memory. Note, here we consider the prefix sums that it operates on, as the input of the function.
    
    */

//binary search


/*
基本思路就是先用前缀和得出一个范围数组
例如 INPUT 是 2，5 
那个前缀和数组就是 2, 7, 意思1，2   属于index0, 3,4,5,6,7 属于index1,  就是让范围可能性具体化出来了
然后就random pick 一个数字从  1 ~~ sum[sum.length-1] 的数组出来。
然后二分法算的是sum的index
#1 如果nextInt 等于sum[mid], 那么直接返回mid,因为是直接知道落在了哪个范围
#2 如果nextInt > sum[mid], 证明nextInt 的范围已经超出了sum[mid]的这个节点，范围可能落在 sum[mid] 以及小于它的左边，所以left = mid+1
#3 如果nextInt < sum[mid],证明nextInt 有可能落在sum[mid]的范围，起码sum[mid]他是及格了，但需要再往左边找找看有没有别的。  1，2，3，4，5，6，7.
例如sum[mid] 是7， nextInt是2， 1~2， 3~7 是一个范围


*/


class Solution {
    int[] sum;
    Random r;
    
    public Solution(int[] w) {
        for(int i = 1 ; i < w.length; i++){
            w[i] += w[i-1];
        }    
        this.sum = w;
        this.r = new Random();
    }
    
    public int pickIndex() {
        int len = sum.length;
        //nextInt from [0 to x) 
        int idx = r.nextInt(sum[len-1]) + 1 ;
        
        int left = 0;
        int right = sum.length-1;
        
        while(left< right){ 
            int mid = left + (right -  left)/2;
            
            if(sum[mid]  == idx){
                return mid;
                //证明mid不可能是目的index，所以可以直接抛弃
            }else if(sum[mid] < idx){
                left = mid + 1;
            }else{
                right = mid;
            }
        }
       return left;
    }
}






class Solution {
    int [] sum ;
    public Solution(int[] w) {
        sum = new int[w.length];
        int tmpSum = 0;
        for(int i = 0 ; i < w.length; i++){
            tmpSum+=w[i];
            sum[i] = tmpSum;
        }
    }

    public int pickIndex() {
        Random r = new Random();
        //because 1 <= w[i] <= 10^5, so nextInt from [0 to x) , then next from [1 to x+1)
        int next = r.nextInt(sum[sum.length-1]) + 1;
        int left = 0;
        int right =sum.length-1;

        /*
        if you use while (lo <= hi) you use lo=mid+1 and hi=mid-1
        if you use while (lo < hi) you use lo = mid+1 and hi=mid
         */
        while(left < right){
            int mid = left + (right - left)/2;
            if(next == sum[mid]){
                return mid;
            }else if( next < sum[mid]){
                right = mid;
            }else{
                left = mid+1;
            }
        }
        return left;
    }
}

