// stack, pre order

class Solution {
    public Node flatten(Node head) {
        if(head == null){
            return head;
        }
        Deque<Node> d = new LinkedList<>();
        d.push(head);
        
        Node dummy = new Node();
        dummy.next = head;
        Node pre = dummy;
        while(!d.isEmpty()){
            Node cur = d.pop();
            cur.prev = pre;
            pre.next = cur;
            if(cur.next != null){
                d.push(cur.next);
            }
            
            if(cur.child!= null){
                d.push(cur.child);
                cur.child = null;
            }
            
            pre = cur;
        }
        Node res = dummy.next;
        dummy.next = null;
        res.prev = null;
        return res;
    }
}


//method 2 : 没有找到child就继续，遇见child就把child的那段头尾跟原来的接起来，然后继续往下走
class Solution {
    public Node flatten(Node head) {
        if(head == null){
            return head;
        }
        
        Node dummy = new Node();
        dummy.next = head;
        
        Node cur = head;
        while(cur != null){
            if(cur.child == null){
                cur = cur.next;
                continue;
            }
            
            Node nextNode = cur.next;
            
            Node childNode = cur.child;
            
            while(childNode.next != null){
                childNode = childNode.next;
            }
            
            childNode.next = nextNode;
            if(nextNode != null){
                nextNode.prev = childNode;
            }
            
            cur.next = cur.child;
            cur.child.prev = cur;
            cur.child = null;
            //这一句不必要是因为child变成null之后，原来有child的那个点就可以继续往下走
         // cur = cur.next;
        }
        return head;
    }
}
