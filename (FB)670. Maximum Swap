/*
基本思路先从右往左遍历， 找到每个位置的最大的INDEX 的映射
然后从左往右遍历， 找到不等于自身的， 交换
将数组转为字符串数组方便遍历每一个数字
从后往前遍历，避免1993交换后出现9193而不是9913
用一个数组记录从后往前的每一个数对应的最大值的索引比如1993，从3开始遍历，最大值是3，3的索引是3，遍历到1时，在已经遍历过的元素中最大是9，所以maxArr[0]是9的索引2，最后maxArr =[2,2,2,3]
再从头遍历原数组，比如chars[0] = 1,和他应该对应的最大值chars[maxArr[0]] = chars[2] = 9不相等 则交换
再举个例子98368，maxArr = [0,4,4,4,4],chars[0] = chars[maxArr[0]] = 9 跳过
chars[1] = 8, chars[maxArr[1]] = chars[4] = 8 相等 继续跳过
chars[2] = 3, chars[maxArr[3]] = chars[4] = 8 不相等，交换
只要交换完成则跳出循环
*/

class Solution {
    public int maximumSwap(int num) {
        if( num < 1){
            return num;
        }
        
        char[] ar = Integer.toString(num).toCharArray();
        int len  = ar.length;
        
        int[] mapIndex = new int[len];
        int maxIndex = len-1;
        for(int i = len-1; i>=0 ; i--){
            if( ar[maxIndex] < ar[i]){
                maxIndex = i;
            }
            mapIndex[i] = maxIndex;
        }
        
        for(int i = 0 ; i < len; i++){
            if(ar[i] != ar[mapIndex[i]]){
                char tmp = ar[mapIndex[i]];
                ar[mapIndex[i]] = ar[i];
                ar[i] = tmp;
                break;
            }
        }
        
        String res = new String(ar);
        return Integer.parseInt(res);
    }
}
