import javax.swing.tree.TreeNode;
import java.util.ArrayList;
import java.util.List;


/*
Time complexity : O(n). We need to traverse over the whole tree once to do the inorder traversal.
 Here, nn refers to the number of nodes in the given tree.

Space complexity : O(n). The sorted listlist will contain nn elements.

 */

class Solution {
    public boolean findTarget(TreeNode root, int k) {
        List<Integer> list  =new ArrayList<>();

        inOrder(root,list);
        int size = list.size();

        int i =0;
        int j = size-1;

        while(i < j){
            if(list.get(i) + list.get(j) == k){
                return true;
            }else if(list.get(i) + list.get(j) < k){
                i++;
            }else{
                j--;
            }
        }

        return false;
    }

    public void inOrder(TreeNode root, List<Integer> list){
        if(root == null){
            return;
        }

        inOrder(root.left , list);
        list.add(root.val);
        inOrder(root.right, list);
    }
}
