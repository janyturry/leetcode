class Solution {
    public int findKthPositive(int[] arr, int k) {
        int left = 1;
        int size = arr.length;
        int right = size + k;
        int count = 0;
        int arrIndex = 0;
        
        int i;
        for (i = left; i <= right; i++) {
            if (arrIndex >= size) {
                return i + k - 1 - count;
            } else {


                if (arr[arrIndex] == i) {
                    arrIndex++;
                } else {
                    count++;
                    if (k == count) {
                        return i;
                    }
                }
            }
        }
        return i;
    }
}


//正常没缺失应该是arr[i] - i = 1, 那么前面缺少一个就是arr[i] - i - 1 = 1, 类推确实k个就是arr[i] -i- 1 = k
//当用二分法找到第一个缺失的index 的时候， 我们要得到的是index+ k ，这就是第K个缺失的数

//binary seatch
class Solution {
    public int findKthPositive(int[] arr, int k) {
          if(arr == null || arr.length <1){
              return 0;
          }
        
        int left = 0;
        //因为这里第一个缺失的INDEX 可能不在已给的数组范围，例如[1,2,3], 这种情况第一个缺失的index 是arr.length , which is 3.
        int right = arr.length;
        
        while(left < right){
            int mid = left +(right - left )/2;
            if(arr[mid] - mid - 1 < k){
                left = mid+1;
            }else{
                right = mid;
            }
        }
        
        return left + k;
    }
}
