
//336. Palindrome Pairs
//leetcode
//任意一个词，我们总是可以在其中任意一个位置K把它一切为二
//那么对于可能的candidate只有情况：
//left 是 palindrome，那么可能的组合是 candidate | left | right，candidate就是right的翻转
//right 是palindrome， 那么可能的组合是 left | right | candidate, 而这里candidate是left的翻转
//所以，一开始有个hashmap，把翻转的字符串保存下来，这样在后面切字符串的时候，方便查询即可。


/*

复杂度分析

时间复杂度：O(n×m x m)，其中 n 是字符串的数量，m 是字符串的平均长度。对于每一个字符串，我们需要 O(m x m)地判断其所有前缀与后缀是否是回文串，并 O(m x m) 地寻找其所有前缀与后缀是否在给定的字符串序列中出现。
空间复杂度：O(n×m)，其中 n 是字符串的数量，m 是字符串的平均长度。为字典树的空间开销。


*/


/*
Input: ["abcd","dcba","lls","s","sssll"]
Output: [[1,0],[0,1],[0,1],[1,0],[3,2],[2,4]]
Expected: [[0,1],[1,0],[3,2],[2,4]]
*/
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class palindromePairs {
	 public static List<List<Integer>> palindromePairs(String[] words) {
		  List<List<Integer>> ret = new ArrayList<>(); 
		    if (words == null || words.length < 2) return ret;
		    Map<String, Integer> map = new HashMap<String, Integer>();
		    for (int i=0; i<words.length; i++) map.put(words[i], i);
		    for (int i=0; i<words.length; i++) {
		        for (int j=0; j<=words[i].length(); j++) { // notice it should be "j <= words[i].length()"
			    //s.substring(0,0) = null
		            String str1 = words[i].substring(0, j);
		            String str2 = words[i].substring(j);
		            if (isPalindrome(str1)) {
		                String str2rvs = new StringBuilder(str2).reverse().toString();
		                if (map.containsKey(str2rvs) && map.get(str2rvs) != i) {
		                    List<Integer> list = new ArrayList<Integer>();
		                    list.add(map.get(str2rvs));
		                    list.add(i);
		                    ret.add(list);
		                }
		            }
		            if (isPalindrome(str2)) {
		                String str1rvs = new StringBuilder(str1).reverse().toString();
		                // check "str.length() != 0" to avoid duplicates
				//避免出现 （"", "abc"） 和 （“abc”, ""） 这样的情况
		                if (map.containsKey(str1rvs) && map.get(str1rvs) != i && str2.length()!=0) { 
		                    List<Integer> list = new ArrayList<Integer>();
		                    list.add(i);
		                    list.add(map.get(str1rvs));
		                    ret.add(list);
		                }
		            }
		        }
		    }
		    return ret;
	 }
	 
	 private static boolean isPalindrome(String str) {
		    int left = 0;
		    int right = str.length() - 1;
		    while (left <= right) {
		        if (str.charAt(left++) !=  str.charAt(right--)) return false;
		    }
		    return true;
		}
}
