//297. Serialize and Deserialize Binary Tree
//leetcode

import javax.swing.tree.TreeNode;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null){
            return null;
        }

        StringBuilder sb  = new StringBuilder();

        helperS(root, sb);
        return sb.toString();
    }

    public void helperS(TreeNode node, StringBuilder sb){
        if(node == null){
            sb.append("#").append(",");
        }else{
            sb.append(node.val).append(",");
            helperS(node.left, sb);
            helperS(node.right, sb);
        }
    }


    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == null || data.length() < 1){
            return null;
        }

        Queue<String> q = new LinkedList<String>(Arrays.asList(data.split(",")));
        return helperD(q);

    }


    public TreeNode helperD(Queue<String> q){
        if(q.isEmpty()){
            return null;
        }

        String tmp = q.poll();

        if(tmp.equals("#")){
            return null;
        }
        TreeNode cur = new TreeNode(Integer.parseInt(tmp));
        cur.left = helperD(q);
        cur.right = helperD(q);
        return cur;
    }
}
