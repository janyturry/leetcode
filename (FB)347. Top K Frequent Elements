//347. Top K Frequent Elements
//leetcode

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/*
时间复杂度：O(n)O(n)，nn 表示数组的长度。首先，遍历一遍数组统计元素的频率，这一系列操作的时间复杂度是 O(n)O(n)；桶的数量为 n + 1n+1，所以桶排序的时间复杂度为 O(n)O(n)；因此，总的时间复杂度是 O(n)O(n)。
空间复杂度：很明显为 O(n)O(n)

*/
class Solution {
    public static int[] topKFrequent(int[] nums, int k) {
        if (nums == null || nums.length < 1) {
            return new int[0];
        }

        Map < Integer, Integer > map = new HashMap < > ();

        for (int i: nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        
        int size = nums.length;
        /SIZE + 1 是处理 {1), k = 1 的情况
        List < Integer > [] fre = new List[size + 1];

        map.forEach((a, b) - > {
            if (fre[b] == null) {
                fre[b] = new LinkedList < Integer > ();
            }

            fre[b].add(a);
        });

        int[] res = new int[k];
        int index = 0;
        for (int i = fre.length - 1; i >= 0; i--) {
            if (fre[i] != null) {
                for (int j = 0; j < fre[i].size() && index < k; j++) {
                    res[index++] = fre[i].get(j);
                }
            }
        }
        return res;
    }
}



/*
时间复杂度：O(nlogk)O(nlogk)，nn 表示数组的长度。首先，遍历一遍数组统计元素的频率，这一系列操作的时间复杂度是 O(n)O(n)；接着，遍历用于存储元素频率的 map，如果元素的频率大于最小堆中顶部的元素，则将顶部的元素删除并将该元素加入堆中，这里维护堆的数目是 kk，所以这一系列操作的时间复杂度是 O(nlogk)O(nlogk) 的；因此，总的时间复杂度是 O(nlog⁡k)O(nlog⁡k)。
空间复杂度：O(n)O(n)，最坏情况下（每个元素都不同），map 需要存储 nn 个键值对，优先队列需要存储 kk 个元素，因此，空间复杂度是 O(n)O(n)。

*/

//priorityQueue
import java.util.*;

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> res = new LinkedList<Integer>();
        if(nums == null || nums.length < 1){
            return res;
        }

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();

        for(int tmp : nums){
            map.put(tmp, map.getOrDefault(tmp,0) + 1);
        }

        PriorityQueue<Map.Entry<Integer, Integer>> p = new PriorityQueue<>((a, b) -> (a.getValue() - b.getValue()));

        for(Map.Entry<Integer, Integer>  entry : map.entrySet()  ){
            p.offer(entry);
            if(p.size() >k){
                p.poll();
            }
        }

        while(p.size()>0){
            res.add(p.poll().getKey());
        }

        return res;
    }
}
