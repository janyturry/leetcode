
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

//79. Word Search
//leetcode
//总共有BFS和DFS两种方法

class point {
	int x;
	int y;

	point(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

//BFS
/*
public class exist {
	public static int[] dirX = { 0, -1, 1, 0 };
	public static  int[] dirY = { -1, 0, 0, 1 };

	
	public static  boolean existhere(char[][] board, String word) {
		if (board == null || board.length == 0 || board[0] == null
				|| board[0].length == 0 || word == null || word.length() == 0) {
			return false;
		}

		int m = board.length;
		int n = board[0].length;

		boolean res = false;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (board[i][j] == word.charAt(0)) {
					point pp = new point(i,j);
					res = helper(new point(i, j), board, word);
					if (res) {
						return res;
					}
				}
			}
		}

		return res;
	}

	public  static boolean helper(point p, char[][] board, String word) {
		HashSet<point> set = new HashSet<point>();
		Queue<point> q = new LinkedList<point>();
		if (word.length() < 2) {
			return true;
		}
		set.add(p);
		q.offer(p);
		int index = 1;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				point tmp = q.poll();

				for (int j = 0; j < 4; j++) {
					int newX = tmp.x + dirX[j];
					int newY = tmp.y + dirY[j];

					if (newX >= 0 && newX <= board.length - 1 && newY >= 0
							&& newY <= board[0].length - 1
							&& index <= word.length() - 1
							&& board[newX][newY] == word.charAt(index)
							&& set.add(new point(newX, newY))) {
						if (index == word.length() - 1) {
							return true;
						}

						q.offer(new point(newX, newY));
					}
				}
			}
			index++;
		}

		return false;
	}

}
*/


//DFS
class exist {
    public boolean exist(char[][] board, String word) {
        boolean res = false;
        if(word == null || word.length() <1){
        	return true;
        }
    	for(int i = 0 ; i < board.length; i++){
        	for(int j = 0 ; j < board[0].length; j++){
        		if(board[i][j] == word.charAt(0)&& helper(i,j,word,board,0)){
        			res = true;
        		}
        	}
        
        }
    	return res;
    }
    
    public boolean helper(int i , int j , String word, char[][] board , int index ){
    	if(index == word.length()){
    		return true;
    	}
    	
    	if(i <0 || i > board.length-1 || j <0 || j > board[0].length-1 || board[i][j] != word.charAt(index) ){
    		return false;
    	}
    	
        board[i][j]^=256;
        boolean res =  helper(i+1,j,word,board,index+1) ||  helper(i-1,j,word,board,index+1)|| helper(i,j+1,word,board,index+1)|| helper(i,j-1,word,board,index+1);
        board[i][j]^=256;
        return res;
    }
}
