//560. Subarray Sum Equals K
//leetcode


import java.util.Map;

//solution 1 : native
class Solution {

    //native
    public static int subarraySum(int[] nums, int k) {
        int  len = nums.length;
        int  count = 0;
        for(int i = 0 ; i < len; i++){
            for(int j = i; j < len; j++){
                int tmpSum = 0;
                for(int p = i; p <=j; p++){
                    tmpSum+= nums[p];

                }
                if(tmpSum == k){
                    count++;
                }
            }
        }
        return count;
    }



    //solution 2: using preSum
    public int subarraySum(int[] nums, int k) {
        int  len = nums.length;
        int  count = 0;
        for(int i = 0 ; i < len; i++){
            int tmpSum = 0;
            for(int j = i; j < len; j++){
                tmpSum+=nums[j];

                if(tmpSum == k){
                    count++;
                }
            }
        }
        return count;
    }



    //solution 3 : Linear Solution
 /*
key: sum value
value : sum 出现的次数
 */


    //Time complexity O(n), Space complexity O(n).
    public int subarraySum(int[] nums, int k) {
        if(nums == null || nums.length < 1){
            return 0;
        }

        Map<Integer, Integer> map = new HashMap<>();

        int preFixSum = 0;
        int count = 0;
      
        map.put(0,1);
        for(int tmp : nums){
            preFixSum+=tmp;
            count+= map.getOrDefault(preFixSum- k, 0);

            map.put(preFixSum, map.getOrDefault(preFixSum,0) + 1);

        }

        return count;



    }

    public static void main(String[] argc){
        int[] test = new int[]{1,1,1};


        System.out.println(subarraySum(test, 2));
    }
}




//prefix sum
//map <sum, frequency>

//problem is how many sumarrays   , sum = k
//we can get all the subarrays be sum(i,j) = sum(0...j) - sum(0...-1)
//sum (0..j) - sum (0...i-1) = k
//so we are checking when i < j , how many subarrays can become
class Solution {
    public int subarraySum(int[] nums, int k) {
        if(nums == null || nums.length <1){
            return 0;
        }

        Map<Integer, Integer> map = new HashMap<>();
        //to handle case like 1, -1, 1, -1    --->    when k = 0 ,first two element sum =  -1+ 1 = 0, it means itself can become the answer.
        //without this initial, -1 + 1 won't be count as answer.
        map.put(0,1);

        int count = 0;
        int sum = 0;
        for(int cur : nums){
            sum+=cur;
            if(map.containsKey(sum - k)){
                count+= map.get(sum-k);
            }
            map.put(sum,map.getOrDefault(sum, 0) + 1 );
        }
        return count;
    }
}

