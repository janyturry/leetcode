/*
Complexity
If a node is root (has no parent) and isn't deleted,
when will we add it to the result.



Time O(N)
Space O(H + N), where H is the height of tree.

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashSet<Integer> set;
    List<TreeNode> res;
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        set = new HashSet<>();
        res = new LinkedList<>();
        
        if(root == null){
            return res;
        }
        
        for(int i: to_delete){
            set.add(i);
        }
             
        helper(root, true);
        return res;
    }
    
    public TreeNode helper(TreeNode root, boolean is_root){
        if(root == null){
            return root;
        }
        
        boolean deleted = set.contains(root.val); 
       
        root.left = helper(root.left,deleted );
        root.right = helper(root.right,deleted);
        if(!deleted && is_root){
            res.add(root);
        }
        
        return deleted ? null : root;  
    }
}
