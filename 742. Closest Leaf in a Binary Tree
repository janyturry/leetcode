import java.util.LinkedList;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//先用DFS 找出K 点， 然后再用BFS 找出 距离K最近的叶子节点
class Solution {
    public int findClosestLeaf(TreeNode root, int k) {
        Set<TreeNode> set = new HashSet<>();
        Map<TreeNode, TreeNode> map = new HashMap<>();
        Queue<TreeNode> q = new LinkedList<>();

        TreeNode kNode = DFS(root,map,k);

        q.offer(kNode);
        set.add(kNode);

        while(!q.isEmpty()){
            TreeNode cur = q.poll();
            if(cur.left == null && cur.right == null ){
                return cur.val;
            }

            if(cur.left!= null && set.add(cur.left)){
                q.offer(cur.left);
            }

            if(cur.right != null && set.add(cur.right)){
                q.offer(cur.right);
            }

            if(map.get(cur) != null && set.add(map.get(cur))){
                q.offer(map.get(cur));
            }

        }
        return -1;
    }

    public TreeNode DFS(TreeNode root, Map<TreeNode, TreeNode> map, int k){
        if(root == null || root.val == k){
            return root;
        }

        if(root.left != null){
            map.put(root.left, root);
            TreeNode left = DFS(root.left, map, k);
            if(left != null){
                return left;
            }
        }

        if(root.right != null){
            map.put(root.right, root);
            TreeNode right = DFS(root.right, map, k);
            if(right != null){
                return right;
            }
        }
        return null;
    }

}
