
import java.util.ArrayList;
import java.util.List;

//212. Word Search II
//leetcode
//首先执行buildTire function来建立tire ,然后使用DFS的方法来搜索
/*
Say the dimension of the input is R and C.
the trie has E = edges and V= vertices.
The time Complexity would be O( RC(V+E))
 */
class TireNode{
	TireNode[] next = new TireNode[26];
	String word;   
}

public class findWords {
	public List<String> findWords(char[][] board, String[] words) {
		List<String> res = new ArrayList<String>();
		TireNode root = buildTire(words);
		for(int i = 0 ; i < board.length; i++){
			for(int j = 0 ; j < board[0].length; j++){
				dfs(board, i, j, root, res);
			}
		}
		
		return res;
		
	}
	
	public void dfs(char[][] board, int i ,int j, TireNode root ,List<String> res ){
		char c = board[i][j];
		if(c == '#' || root.next[c-'a'] == null){
		    return;
		}
		
		root = root.next[c-'a'];
		if(root.word != null){
			res.add(root.word);
			root.word = null;
		}
		
		 board[i][j] = '#';
		 if(i+1 >=0 && i+1 < board.length &&j>=0 && j < board[0].length){
			 dfs(board, i+1, j, root, res);
		 }
		 if(i-1 >=0 && i-1 < board.length &&j>=0 && j < board[0].length){
			 dfs(board, i-1, j, root, res);
		 }
		 if(i >=0 && i< board.length &&j+1>=0 && j+1 < board[0].length){
			 dfs(board, i, j+1, root, res);
		 }
		 if(i >=0 && i< board.length &&j-1>=0 && j-1 < board[0].length){
			 dfs(board, i, j-1, root, res);
		 }
		 
		 board[i][j] = c;
		 
		 return;
		
	} 
	
	public  TireNode buildTire(String[] words){
		TireNode root = new TireNode();
		for(String word : words){
			TireNode tmp = root;
			for(char c : word.toCharArray()){
			    if(tmp.next[c-'a'] == null){
			    	tmp.next[c-'a'] = new TireNode();
			    }
			    tmp = tmp.next[c-'a'];
			}
			tmp.word = word;
		}
		return root;
	}
}
