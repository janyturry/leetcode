//309. Best Time to Buy and Sell Stock with Cooldown
//leetcode

/*
1. 定义状态
hold[i] : 第i天hold股票的最大profit
unhold[i] : 第i天不hold股票的最大profit


2. target : unhold[n-1]

3.base case:
hold[0] = -prices[0];
hold[1] = max( -prices[1], -prices[0])
unhold[0] = 0;

4.状态转移
hold[i] 取以下情况最大值
1. 第i天买入，   unhold[i-1] - prices[i]
2. 第i天没有买入  hold[i-1]


unhold[i] 取以下情况最大值
1. 第i天有卖出  hold[i-1] + prices[i]
2. 第i天没有卖出  unhold[i-1]


time: O(n)
space:O(N)


 */


/*
class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length <=1){
            return 0;
        }

        int len =  prices.length;

        int hold[] = new int[len];
        int unhold[] = new int[len];


        hold[0] = -prices[0];


        for(int i =1; i <=len-1;i++){
            if( i ==1){
                hold[i] = Math.max(-prices[i], hold[i-1]);
            }else{
                hold[i] = Math.max(unhold[i-2]-prices[i] , hold[i-1]);
            }

            unhold[i] = Math.max(hold[i-1] + prices[i] , unhold[i-1]);
        }

        return unhold[len-1];
    }
*/



/*
因为只需要用到
hold[i-1] , hold[i]
unhold[i], unhold[i-1] , unhold[i-2]
所以根据以上的方法， 只需要用五个变量和维护就可以了

space (n) ->>>>> space(1)
 */


    public int maxProfit(int[] prices) {
        if(prices == null || prices.length <=1){
            return 0;
        }

        int len =  prices.length;

        int hold=-prices[0], hold1 = hold ;
        int unhold = 0, unhold1 = 0, unhold2= 0;

        for(int i =1; i <=len-1;i++){
            if( i ==1){
                hold = Math.max(-prices[i], hold1);
            }else{
                hold = Math.max(unhold2-prices[i] , hold1);
            }

            unhold = Math.max(hold1 + prices[i] , unhold1);

            hold1 = hold;
            unhold2 = unhold1;
            unhold1 = hold;

        }

        return unhold;
    }
}
