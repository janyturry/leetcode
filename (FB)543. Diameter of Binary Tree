/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int res;
    public int diameterOfBinaryTree(TreeNode root) {
        res = 0;
        if(root == null){
            return 0;
        }       
        
        dfs(root);
        return res;
    }
    
    //返回从ROOT 开始 向下经过最长的EDGE 数量
    public int dfs(TreeNode root){
        if(root == null){
            return 0;
        }
    
        int left =  dfs(root.left);
        int right = dfs(root.right);
    
        res = Math.max(res, left + right );
        //因为往上返回会有一个 点是 链接ROOT 的， 所以要+ 1 
        return Math.max(left , right) + 1;
    }
}


/*
时间复杂度：O(N)，其中 N 为二叉树的节点数，即遍历一棵二叉树的时间复杂度，每个结点只被访问一次。
空间复杂度：O(Height)，其中 Height 为二叉树的高度。由于递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，而递归的深度显然为二叉树的高度，并且每次递归调用的函数里又只用了常数个变量，所以所需空间复杂度为 
O(Height) 。

*/
class Solution {
    int res;
    public int diameterOfBinaryTree(TreeNode root) {
        res = 0;
        helper(root);
        return  res-1;
    }
    //helper 返回经过 这个节点的 最多节点数
    public int helper(TreeNode root){
        if(root == null){
            return 0;
        }
        
        int left = helper(root.left);
        int right = helper(root.right);
        //这个是计算 结果的
        res = Math.max(res,left + right + 1);
        
        //这个是返回结果
        return Math.max(left, right) +1;
    }
}
