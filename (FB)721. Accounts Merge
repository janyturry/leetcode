import java.util.*;


/*

Time Complexity: O(AlogA), where Aâ€‹is the length of accounts[i].

Space Complexity: O(A), the space used by our DSU structure.

 */
class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        Map<String, String> parent = new HashMap<>();
        Map<String, String> owner = new HashMap<>();
        Map<String, TreeSet<String>> union = new HashMap<>();

        for(List<String> cur : accounts){
            for(int i = 1; i < cur.size(); i++){
                parent.put(cur.get(i), cur.get(i));
                owner.put(cur.get(i), cur.get(0));
            }
        }

        for(List<String> cur : accounts){
            String p = find(parent, cur.get(1));
            for(int i = 2; i < cur.size(); i++){
                parent.put(find(parent,cur.get(i)) , p);
            }
        }

        for(List<String> cur : accounts){
            String p = find(parent, cur.get(1));
            if(!union.containsKey(p)){
                union.put(p,new TreeSet<String>());
            }

            for(int i = 1; i < cur.size(); i++){
                union.get(p).add(cur.get(i));
            }
        }

        List<List<String>> res = new ArrayList<>();
        for(String key : union.keySet()){
            String own = owner.get(key);
            List<String> cur  = new ArrayList<String> (union.get(key));
            cur.add(0, own);
            res.add(cur);
        }

        return res;
    }

    public String find(Map<String, String> parent, String p){
        if(parent.get(p) != p){
            return find(parent, parent.get(p));
        }else {
            return parent.get(p);
        }
    }
}
