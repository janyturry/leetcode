class Solution {
    public int mySqrt(int x) {
        if(x == 0){
            return 0;
        }
        
        if(x == 1){
            return 1;
        }
        
        int left =1;
        int right = x/2;
        
        //使用右中位数
        while(left < right){
            int mid = left + (right - left+1)/2;
            if(mid > x/mid){
                right = mid -1;
            }else if(mid == x/mid){
                return mid;
            }
            else{
                left = mid;
            }
        }
        
        return left;
    }
}


//使用标准的二分模板， 不是绝对值不是左右边界
//binary search

class Solution {
    public int mySqrt(int x) {
        if (x <= 1) {
            return x;
        }
        int left = 1;
        int right = x - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            //mid * mid 可能会溢出int,所以用除法处理，mid是不可能为0
            if (mid < x / mid) {
                if (mid + 1 > x / (mid + 1)) {
                    return mid;
                }
                left = mid + 1;
            } else if (mid > x / mid) {
                right = mid - 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
}





/*
由于 x 平方根的整数部分 ans 是满足 k*k <=x, 因此我们可以对 k 进行二分查找，从而得到答案。

二分查找的下界为 0，上界可以粗略地设定为 x。在二分查找的每一步中，我们只需要比较中间元素 mid 的平方与 x 的大小关系，
并通过比较的结果调整上下界的范围。由于我们所有的运算都是整数运算，不会存在误差，因此在得到最终的答案 ans 后，
也就不需要再去尝试 ans+1 了。

时间复杂度：O(logx)，即为二分查找需要的次数。

空间复杂度：O(1)
 */
class Solution {
    public int mySqrt(int x) {
        int left = 0;
        int right = x;
        int ans = -1;

        int res = -1;
        while(left<=right){
            int mid = left  + (right - left)/2;
            //防止溢出 mid * mid 有可能超出Int范围
            if(((long)mid * mid) <=x ){
                left = mid + 1;
                ans = mid;
            }else{
                right = mid -1;
            }
        }
        return ans;
    }
}
