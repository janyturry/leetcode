


//刚开始使用三维数组
class Solution {
    public double knightProbability(int N, int K, int r, int c) {
        //preways [i][j][K]  means 第K步  走到 第i行J 列的 可能性
        double [][][] preWays = new double[N][N][K+1];

        preWays[r][c][0] = 1;

        int[][] dir = new int[][]{{1,2}, {-1,-2}, {-1,2}, {1,-2}, {2,1}, {-2,-1}, {-2,1}, {2,-1}};
        for(int z = 1; z <=K; z++){
            for(int i = 0; i < N; i++ ){
                for(int j = 0; j < N; j++){
                    for(int[]d : dir){
                        int newX =  i+ d[0];
                        int newY = j + d[1];
                        if(newX >= 0 && newX< N && newY>=0 && newY <N ){
                            preWays[newX][newY][z] += preWays[i][j][z-1]/8.0;
                        }
                    }
                }
            }
        }

        double res = 0;
        for(int i = 0; i < N; i++){
            for(int j = 0 ; j < N;j++){
                res+=preWays[i][j][K];
            }
        }
        return res;
    }
}






//improve to 二维数组

class Solution {
    public double knightProbability(int N, int K, int r, int c) {
        //preways [i][j]  means 上一步 走到 i行J 列的 可能性
        double [][] preWays = new double[N][N];

        preWays[r][c] = 1;

        int[][] dir = new int[][]{{1,2}, {-1,-2}, {-1,2}, {1,-2}, {2,1}, {-2,-1}, {-2,1}, {2,-1}};
        for(int z = 1; z <=K; z++){
            //ways[i][j]当前到达 i行J 列的可能性
            double [][] ways = new double[N][N];
            for(int i = 0; i < N; i++ ){
                for(int j = 0; j < N; j++){
                    for(int[]d : dir){
                        int newX =  i+ d[0];
                        int newY = j + d[1];
                        if(newX >= 0 && newX< N && newY>=0 && newY <N ){
                            ways[newX][newY] += preWays[i][j]/8.0;
                        }
                    }
                }
            }
            preWays = ways;
        }

        double res = 0;
        for(int i = 0; i < N; i++){
            for(int j = 0 ; j < N;j++){
                res+=preWays[i][j];
            }
        }
        return res;
    }
}
