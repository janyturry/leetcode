import java.util.*;

//leetcode
//332. Reconstruct Itinerary
//DFS, HIERHOLZER 算法
/*
path = [];
DFS(u) :
        while (u 存在未被访问的边e(u,v))
              mark 边e (u,v) 为访问
              DFS（v）
        End
        path.pushLeft(u)


let n be the number of tickets:
建图：O(n + nlogn) , priority queue sort 用的是nlogn
 Hierholzer : O(n)
estimated time : O(n + nlogn + n)
space: o(n);
 */

public class Main {

    public List<String> findItinerary(List<List<String>> tickets) {
        Map<String, PriorityQueue<String>> map = new HashMap<String, PriorityQueue<String>>();
        LinkedList<String> res = new LinkedList<String>();
        for(List<String> sub : tickets){
            if(!map.containsKey(sub.get(0))){
                PriorityQueue<String>  tmp = new PriorityQueue<String>();
                map.put(sub.get(0), tmp);
            }

            map.get(sub.get(0)).offer(sub.get(1));
        }

        dfs("JFK", map, res);
        return res;
    }

    public void dfs(String start, Map<String, PriorityQueue<String>> map, LinkedList<String> res){
        PriorityQueue<String> tmpQueue = map.get(start);

        while(tmpQueue !=null && !tmpQueue.isEmpty()){
            dfs(tmpQueue.poll(), map, res);
        }

        res.addFirst(start);
    }


    public static void main(String[] args) {
        String [][] test = {{"MUC","LHR"},{"JFK","MUC"},{"SFO","SJC"},{"LHR","SFO"}};
        findItinerary(test);
    }
}
