//tree
//method 1
//插入的时候BFS 找到插入的位置，然后插进去
// O(1) Build Tree + O(N) Insert:
class CBTInserter {
    TreeNode root;

    public CBTInserter(TreeNode root) {
        this.root = root;
    }

    public int insert(int v) {
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0 ; i < size; i++){
                TreeNode cur = q.poll();
                if(cur.right != null){
                    q.offer(cur.left);
                    q.offer(cur.right);
                }else{
                    if(cur.left == null){
                        cur.left = new TreeNode(v);
                        return cur.val;
                    }else{
                        cur.right = new TreeNode(v);
                        return cur.val;
                    }
                }
            }
        }
        return 0;
    }

    public TreeNode get_root() {
        return root;
    }
}




//method 2
//INIT 的时候就是找到QUEEU 的头结点就是缺失LFT CHILD 或者RIGHT CHILD的
//然后SEARCH 的时候 如果缺失的是左节点， 就插入左节点， 如果是缺失右节点， 就插入右节点， 然后POLL出母节点， 然后加进左右子节点
//initial O(n), insert o(1)
//插的顺序是上到下，左到右
class CBTInserter {
    private TreeNode root;
    private Queue<TreeNode> q = new LinkedList<>();

    public CBTInserter(TreeNode root) {
        this.root = root;
        q.offer(root);
        //让PEEK 指向缺少左节点或者右节点的第一个节点
        while (q.peek().right != null && q.peek().left != null) {
            q.offer(q.peek().left);
            q.offer(q.peek().right);
            q.poll();
        }
    }

    public int insert(int v) {
        TreeNode p = q.peek();
        if (p.left == null) {
            p.left = new TreeNode(v);
        }else {
            p.right = new TreeNode(v);
            q.offer(p.left);
            q.offer(p.right);
            q.poll();
        }
        return p.val;
    }

    public TreeNode get_root() { return root; }
}
