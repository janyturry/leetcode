
//33. Search in Rotated Sorted Array
//leetcode
//思路： 二分，找出mid跟 s比较，先判断mid 落在左边递增区间还是右边递增区间。 ex : 4,5,1,2,3   这里 mid （1） 落在右边递增区间.
//当确定落在哪个递增区间之后，再判断target 是不是落在这个区间
//binary search

//选择的是标准的二分模板  while(left <= right)

class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length < 1){
            return -1;
        }
        
        int left = 0;
        int right = nums.length-1;
        
        while(left <= right){
            int mid = left + (right - left)/2;
            if(nums[mid] == target){
                return mid;
            }
            if(nums[mid] < nums[right]){
                if(nums[mid] <= target && nums[right] >= target ){
                    left = mid +1;
                }else{
                    right = mid-1;
                }
            }else if(nums[mid] > nums[right]){
                if(nums[left] <= target && nums[mid] >= target ){
                    right = mid-1 ;
                }else{
                    left = mid +1;
                }
            }else{
                return -1;
            }
        }
        
        return -1;
    }
}








class Solution {
    public int search(int[] nums, int target) {
        	if (nums == null || nums.length == 0) {
			return -1;
		}

		int s = 0;
		int e = nums.length - 1;

		while (s  < e) {
			int mid = s + (e - s) / 2;
			if (nums[mid] == target) {
				return mid;
			}

//注意这里是nums[mid+1]
			if (nums[mid] <nums[e]) {
				if (target <= nums[e] && target >= nums[mid+1]) {
					s = mid+1;
				} else {
					e = mid;
				}
			} else {
				if (target <= nums[mid] && target >= nums[s]) {
					e = mid;
				} else {
					s = mid+1;
				}
			}
		}

		if (nums[s] == target) {
			return s;
		} else {
            return -1;
        }
    }
}
