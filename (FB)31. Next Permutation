package test;
/*
标准的“下一个排列”算法可以描述为：

1. 从后向前查找第一个相邻升序的元素对 (i,j)，满足 A[i] < A[j]。此时 [j,end) 必然是降序
2. 在 [j,end) 从后向前查找第一个满足 A[i] < A[k] 的 k。A[i]、A[k] 分别就是上文所说的「小数」、「大数」
3. 将 A[i] 与 A[k] 交换
4. 可以断定这时 [j,end) 必然是降序，逆置 [j,end)，使其升序
5. 如果在步骤 1 找不到符合的相邻元素对，说明当前 [begin,end) 为一个降序顺序，则直接跳到步骤 4

*/


class Solution {
    public void nextPermutation(int[] nums) {
        int len = nums.length;
        
        int indexA = -1;
        //从后向前查找第一个相邻升序的元素对 (i,j)，满足 A[i] < A[j]。此时 [j,end) 必然是降序
        for(int i = len-2; i >=0 ; i--){
            if(nums[i] < nums[i+1]){
                indexA = i; 
                break;
            }
        }
        
        if(indexA<0){
            reverse(nums,0, len-1);
            return;
        }
        
        //在 [j,end) 从后向前查找第一个满足 A[i] < A[k] 的 k。A[i]、A[k] 分别就是上文所说的「小数」、「大数」
        for(int  i = len-1; i >= indexA+1; i --){
            if(nums[i] > nums[indexA]){
                //将 A[i] 与 A[k] 交换
                swap(nums, i, indexA);
                //可以断定这时 [j,end) 必然是降序，逆置 [j,end)，使其升序
                reverse(nums, indexA+1, len-1);
                break;
            }
        }
        
    }
    
    public void swap(int[]nums, int a, int b){
        int tmp = nums[a];
        nums[a] = nums[b];
        nums[b] = tmp;
    }
    
    public void reverse(int[]nums, int a, int b){
        while(a< b){
            swap(nums, a,b);
            a++;
            b--;
        }
    }
}


//31. Next Permutation
//leetcode
//思路：纯数学题要记公式
//step1 :from right to left, find the first number which break the increasing(到从右到左递增的数字). ex:    1,4,5,2,1    ,  4  is the number we find
//step 2 : if we don't find number from step1, then we just reverse the whole array, ex : from   3,2,1 to 1,2,3
//step 3, from right to left, find the first number which larger than the number from step 1.
//step4 : swap number from step 1 and step 3.
//step5: reverse the whole array from range[step1 +1 , until end];

/*
 don't think any one can understand this solution without seeing an example, here is an example:
2,3,6,5,4,1

Solution:
Step1, from right to left, find the first number which not increase in a ascending order. In this case which is 3.
Step2, here we can have two situations:

We cannot find the number, all the numbers increasing in a ascending order. This means this permutation is the last permutation, we need to rotate back to the first permutation. So we reverse the whole array, for example, 6,5,4,3,2,1 we turn it to 1,2,3,4,5,6.

We can find the number, then the next step, we will start from right most to leftward, try to find the first number which is larger than 3, in this case it is 4.
Then we swap 3 and 4, the list turn to 2,4,6,5,3,1.
Last, we reverse numbers on the right of 4, we finally get 2,4,1,3,5,6.

Time complexity is: O(3*n)=O(n).
*/
