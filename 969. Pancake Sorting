/*
Time: O(N^2)
Flips: 2*N

#1先找出最大的数字的index, 也就是maxIndex
#2然后从0 -> maxIndex 进行一次交换， 把当前最大的换到第一的位置
#3 然后进行 0 - > largest 进行一次交换， 把最大的换到最后一位，
$4最大的位置递减一次， 意味着排好了
*/
class Solution {
    public List<Integer> pancakeSort(int[] A) {
        //A[i] is a permutation of [1, 2, ..., A.length]
        List<Integer> res = new LinkedList<>();
        int n  = A.length;
        int max = n;

        for(int i = 0 ; i < n; i++){
            int maxIndex = find(A, max);
            swap(A, maxIndex);
            swap(A, max-1);
            res.add(maxIndex+1);
            res.add(max--);
        }
        return res;
    }

    public int find(int[] A , int max){
        for(int i = 0 ; i < A.length; i++){
            if(A[i] == max){
                return i;
            }
        }
        return -1;
    }

    public void swap(int[]A , int b){
        int a = 0;
        while(a < b){
            int tmp = A[a];
            A[a] = A[b];
            A[b] = tmp;
            a++;
            b--;
        }
    }
}
