//133. Clone Graph
//leetcode


import java.util.LinkedList;

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;

    public Node() {}

    public Node(int _val,List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
//BFS
class Solution {
    public Node cloneGraph(Node node) {
        if(node == null){
            return node;
        }
        //old node, new node
        Map<Node, Node> map = new HashMap<>();
        Node clone = new Node(node.val);
        map.put(node,clone);
        
        Queue<Node> q = new LinkedList<>();
        q.offer(node);
        
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0 ; i< size; i++){
                Node cur = q.poll();
                for(Node n : cur.neighbors){
                    if(!map.containsKey(n)){
                        Node nClone = new Node(n.val);
                        map.put(n, nClone);
                        q.offer(n);
                    }
                    map.get(cur).neighbors.add(map.get(n));
                }
            }
        }
        
        return map.get(node);
        
    }
}


//DFS

class Solution {
    public Node cloneGraph(Node node) {
        Map<Node , Node> map = new HashMap<>();

        return clone(node, map);
    }

    public Node clone (Node node , Map<Node, Node> map){
        if(node == null){
            return node;
        }

        if(map.containsKey(node)){
            return map.get(node);
        }

        Node copyNode = new Node (node.val, new LinkedList<Node>());
        map.put(node, copyNode);

        for(node child : node.neighbors){
            if(!map.containsKey(child)){
                clone(child, map);
            }else{
                map.get(node).neighbors.add(map.get(child));
            }
        }

        return node;
    }
}
