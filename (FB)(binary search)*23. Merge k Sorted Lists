



class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length < 1){
            return null;
        }
        
        return merge(lists, 0, lists.length-1);
    }
    
    public ListNode merge(ListNode[] lists, int s, int e){
        if(s == e){
            return lists[s];
        }
        
        int mid = s + (e-s)/2;
        ListNode left = merge(lists, s, mid); 
        ListNode right = merge(lists, mid + 1, e);
        
        return mergeTwo(left, right);
    }
    
    public ListNode mergeTwo(ListNode a, ListNode b){
        if(a == null || b == null){
            return a==null ? b : a;
        }
        
        if(a.val <= b.val){
            a.next = mergeTwo(a.next, b);
            return a;
        }else{
            b.next = mergeTwo(a, b.next);
            return b;
        }
    }
    
}



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 // k is numer of list and n is total item nums
 //time: O(nlogk)
 //spacecQ(k)
 //使用priority queue, 先把头都放进去 然后每次pop出最小的值，一直下去
 
 //binaey search
 
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length <1){
            return null;
        }

        ListNode res = new ListNode(0);
        ListNode cur = res;

        PriorityQueue<ListNode> q = new PriorityQueue<>(lists.length, (a, b)-> a.val - b.val);


        for(ListNode n : lists){
            if(n !=null){
                q.offer(n);
            }
        }

        while(!q.isEmpty()){
            ListNode tmp = q.poll();
            cur.next = tmp;
            cur = cur.next;
            if(tmp.next!=null){
                q.offer(tmp.next);
            }
        }

        return res.next;
    }
}








/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 //time: divide and conquer  O(nlogk)
 //Space complexity : O(1)
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length <1 ){
            return null;
        }

        return helper(lists, 0, lists.length-1);
    }

    public ListNode helper(ListNode[] lists , int s, int e ){
        if(s ==e){
            return lists[s];
        }

        int mid = s + (e-s)/2;
        ListNode left = helper(lists, s, mid);
        ListNode right = helper(lists, mid+1, e);
        return merge(left, right);
    }

    public ListNode merge(ListNode left, ListNode right){
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
        while(left != null && right != null){
            if(left.val <= right.val){
                cur.next = left;
                cur = cur.next;
                left = left.next;
            }else {
                cur.next = right;
                cur = cur.next;
                right = right.next;
            }
        }

        while(left != null){
            cur.next = left;
            cur = cur.next;
            left = left.next;
        }

        while(right != null){
            cur.next = right;
            cur = cur.next;
            right = right.next;
        }

        return dummy.next;
    }
}
