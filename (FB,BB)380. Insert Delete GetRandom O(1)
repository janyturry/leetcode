
https://leetcode-cn.com/problems/insert-delete-getrandom-o1/solution/chang-shu-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-j/



class RandomizedSet {
    Map<Integer, Integer> map;
    List<Integer> list;
    Random r;
    /** Initialize your data structure here. */
    public RandomizedSet() {
        map = new HashMap<>();
        list = new ArrayList<>();
        r = new Random();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if(map.containsKey(val)){
            return false;
        }
        
        map.put(val, list.size());
        list.add(list.size(), val);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if(!map.containsKey(val)){
            return false;
        }
        int deleteIndex = map.get(val);
        int lastElementVal = list.get(list.size()-1);
        list.set(deleteIndex, lastElementVal);
        map.put(lastElementVal, deleteIndex);
        list.remove(list.size()-1);
        map.remove(val);
        return true;
        
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        return list.get(r.nextInt(list.size()));
    }
}



//380. Insert Delete GetRandom O(1)
//使用hashmap 来记录 <插入值， 在array里面的index>,
//当插入的时候，如果存在，return false， 当不存在，插入到hashmap 和 arrayList. 移除的时候， 把需要移除的
//放到最后， 交换， ，	
//后面有个follow up 是允许duplicate, 关键是add a set to the hashMap to remember all the locations of a duplicated number.
class RandomizedSet {
    List<Integer> num;
    Map<Integer, Integer> map;
    Random random;

    /** Initialize your data structure here. */
    public RandomizedSet() {
        num = new ArrayList<>();
        map = new HashMap<>();
        random = new Random();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if(map.containsKey(val)){
            return false;
        }else{
            num.add(val);
            map.put(val, num.size()-1);
        }
        
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if(!map.containsKey(val)){
            return false;
        }else{
            int index = map.get(val);
            if(index != num.size()-1){
                int tmpVal =  num.get(num.size()-1);
                num.set(index, tmpVal);
                map.put(tmpVal, index);
            }
            
            num.remove(num.size()-1);
            map.remove(val);
        }   
        
        return true;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        return num.get(random.nextInt(num.size()));
    }
}

 
    
    //follow up:allowing duplications
    /*
    public class RandomizedSet {
	    ArrayList<Integer> nums;
	    HashMap<Integer, Set<Integer>> locs;
	    java.util.Random rand = new java.util.Random();
	    public RandomizedSet() {
	        nums = new ArrayList<Integer>();
	        locs = new HashMap<Integer, Set<Integer>>();
	    }
	    
	    public boolean insert(int val) {
	        boolean contain = locs.containsKey(val);
	        if ( ! contain ) locs.put( val, new HashSet<Integer>() ); 
	        locs.get(val).add(nums.size());        
	        nums.add(val);
	        return ! contain ;
	    }
	    
	    public boolean remove(int val) {
	        boolean contain = locs.containsKey(val);
	        if ( ! contain ) return false;
	        int loc = locs.get(val).iterator().next();
                locs.get(val).remove(loc);
	        if (loc < nums.size() - 1 ) {
	            int lastone = nums.get(nums.size() - 1 );
	            nums.set( loc , lastone );
	            locs.get(lastone).remove(nums.size() - 1);
	            locs.get(lastone).add(loc);
	        }
	        nums.remove(nums.size() - 1);
	        if (locs.get(val).isEmpty()) locs.remove(val);
	        return true;
	    }
	    
	    public int getRandom() {
	        return nums.get( rand.nextInt(nums.size()) );
	    }
	}
    */
}
