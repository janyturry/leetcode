class Solution {
    public Node copyRandomList(Node head) {
        Map<Node, Node> map = new HashMap<>();
        
        
        Node cur = head;
        while(cur != null){
            Node curCopy = new Node(cur.val);
            map.put(cur, curCopy);
            cur = cur.next;
        }
          
        cur = head;
        while(cur != null){
            map.get(cur).next = map.get(cur.next);
            map.get(cur).random = map.get(cur.random);
            cur = cur.next;
        }
        
        return map.get(head);
        
    }
}


//138. Copy List with Random Pointer
//leetcode
/*The idea is to associate the original node with its copy node in a single linked list. In this way, we don't need extra space to keep track of the new nodes.
(1) 第一次循环， 复制每个节点,插在中间， 链接起来
(2) 第二次循环 ， 复制random点， 有个规律
(3) 第三次循环     deattach 节点
*/

/*
复杂度分析
时间复杂度：O(N)
空间复杂度：O(1)
 */
class Solution {
    public Node copyRandomList(Node head) {
        if(head == null){
            return head;
        }

        Node dummyHead = head;
        while(dummyHead != null){
            Node copyNode = new Node(dummyHead.val);
            copyNode.next = dummyHead.next;
            dummyHead.next = copyNode;
            dummyHead = copyNode.next;
        }

        dummyHead = head;
        while(dummyHead != null && dummyHead.next!= null){
            if(dummyHead.random != null){
                dummyHead.next.random = dummyHead.random.next;
            }
            dummyHead = dummyHead.next.next;
        }

        dummyHead = head;
        Node resCopyHead = dummyHead.next;
        Node copyHead = dummyHead.next;
        while(copyHead.next != null){
            dummyHead.next = dummyHead.next.next;
            dummyHead = dummyHead.next;


            copyHead.next = copyHead.next.next;
            copyHead = copyHead.next;
        }

        dummyHead.next = null;

        return resCopyHead;
    }
}
