/*

Suppose there are n houses, since house 0 and n - 1 are now neighbors, we cannot rob them together and thus the solution is now the maximum of

Rob houses 0 to n - 2;
Rob houses 1 to n - 1.
The code is as follows. Some edge cases (n < 2) are handled explicitly.


*/

class Solution {
    public int rob(int[] nums) {
        if(nums == null || nums.length < 1){
            return 0;
        }
        
        int len = nums.length;
        
        if(len == 1){
            return nums[0];
        }
        
        if(len ==2){
            return Math.max(nums[0], nums[1]);
        }
        
        return Math.max(helper(nums, 0, len-2), helper(nums, 1, len-1));
    }
    
    public int helper(int[] nums, int s, int e){
        int pre = 0;
        int cur = 0;
        
        for(int i = s; i <= e; i++){
            int tmp = Math.max(pre + nums[i], cur);
            pre = cur;
            cur = tmp;
        }
        return cur;
    }
}
