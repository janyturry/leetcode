//顺序如下, 先进先出， front 先出，入队列会在rear后面
// front ***** rear
class MyCircularQueue {
    final int[] ar;
    int len;
    int front;
    int rear;

    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
        ar = new int[k];
        front = 0;
        rear = -1;
        len = 0;
    }

    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
        if(!isFull()){
            if(++rear == ar.length){
                rear = 0;
            }

            len++;
            ar[rear] = value;
            return true;
        }
        return false;
    }

    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
        if(!isEmpty()){
            if(++front == ar.length){
                rear = 0;
            }

            len--;
            return true;
        }
        return false;
    }

    /** Get the front item from the queue. */
    public int Front() {
        return 	isEmpty()? -1 : ar[front];
    }

    /** Get the last item from the queue. */
    public int Rear() {
        return 	isEmpty()? -1 : ar[rear];

    }

    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        if(len == 0){
            return true;
        }
        return false;


    }

    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        if(len == ar.length){
            return true;
        }
        return false;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
