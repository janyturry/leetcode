
//91. Decode Ways
//leetcode
/*
62. Unique Paths
70. Climbing Stairs
509. Fibonacci Number

*/

//思路：DP， 设置dp数组，长度为n+1, dp[i] 表示一直到第I位置一共有多少个 decode方法， 因为只有1位数和2位数可以对应decode,所以只需要看当前位置的一位或者前两位
public class numDecodings {
	public int numDecodings(String s) {
		if (s == null || s.length() < 1) {
			return 0;
		}

		int[] dp = new int[s.length() + 1];
		int n = s.length();
		dp[0] = 1;
		dp[1] = s.charAt(0) == '0' ? 0 : 1;

		for (int i = 2; i <= n; i++) {
			int first = Integer.parseInt(s.substring(i - 1, i));
			int second = Integer.parseInt(s.substring(i - 2, i));

			if (first >= 1 && first <= 9) {
				dp[i] = dp[i] + dp[i - 1];
			}

			if (second >= 10 && second <= 26) {
				dp[i] = dp[i] + dp[i - 2];
			}
		}
		return dp[n];
	}
}
