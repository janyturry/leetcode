class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> res=   new LinkedList<>();
        if(root == null){
            return res;
        }
        
        //store node
        Queue<TreeNode> q = new LinkedList<>();
        
        //store index
        Queue<Integer> col = new LinkedList<>();

        q.offer(root);
        col.offer(0);

        int max = 0;
        int min = 0;

        HashMap<Integer, List<Integer>> map = new HashMap<>();

        while(!q.isEmpty()){
            TreeNode cur = q.poll();
            Integer index = col.poll();

            map.putIfAbsent(index, new LinkedList<Integer>());

            map.get(index).add(cur.val);
            
            if(cur.left!= null){
                q.offer(cur.left);
                col.offer(index-1);
                 min = Math.min(min, index-1);
            }
            
            if(cur.right != null){
                q.offer(cur.right);
                col.offer(index+1);
                max = Math.max(max, index+1);
            }


        }
        
        for(int i = min; i <=max; i++){
            res.add(map.get(i));
        }
        
        return res;

    }
}
