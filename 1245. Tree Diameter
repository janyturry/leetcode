/*
时间复杂度：
dfs需要遍历每一个节点，由于不会重复遍历，所以这一部分的时间复杂度是O(N)，除此之外查找所有顶点的邻接点所需时间为O(E)，E为所有边的数量。固精确来讲，dfs总的时间复杂度应该是O(N+E)

空间复杂度：
由于我们需要建立树形结构（List[] tree），空间复杂度是O(N)。
另外dfs本身是递归，它的空间复杂度也是O(N)。

 */

class Solution {
    int res=0; // 返回结果

    public int treeDiameter(int[][] edges) {
        // 利用边的信息构建出树的结构，即每个节点能和哪些节点相连接
        List<Integer>[] tree = new List[edges.length+1];
        // 初始化
        for(int i=0;i<tree.length;i++){
            tree[i] = new ArrayList<>();
        }
        // 构建树
        for(int[] edge : edges){
            tree[edge[0]].add(edge[1]);
            tree[edge[1]].add(edge[0]);
        }
        dfs(tree, 0, -1); // 开始dfs
        return res;
    }

    // tree为树的结构图
// current为当前节点
// previous为前一个节点
// 返回值为：以当前节点为起点的一条最大路径长度
    int dfs(List[] tree, int current, int previous){
        // 查看当前节点能与哪些节点连接
        List<Integer> list = tree[current];
        int max1=0; // 以当前节点为起点的一条最大路径长度
        int max2=0; // 以当前节点为起点的一条次大路径长度
        // 循环所有与当前节点相连的点
        for(int next : list){
            // 防止走回头路
            if(next != previous){
                // dfs得到下一个节点一条路径的最大长度
                // 加一之后为当前节点一条路径的长度
                int max = dfs(tree, next, current)+1;
                // 比较当路径长度与之前得到的max1，max2，并更新最大值
                if(max>=max1){
                    max2=max1;
                    max1=max;
                }else if(max>=max2){
                    max2=max;
                }
                // max1+max2得到当前节点最大边长,与返回结果比较，更新最大值
                res=Math.max(res, max1+max2);
            }
        }
        // 返回当前节点一条路径的最大长度
        return max1;
    }
}
