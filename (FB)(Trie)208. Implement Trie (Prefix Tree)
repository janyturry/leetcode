class Trie {
    class Node{
        Node[] next;
        boolean isEnd;
        public Node(){
            isEnd = false;
            next = new Node[26];
        }
    }
    
    Node root;

    public Trie() {
        root = new Node();
        
    }
    
    public void insert(String word) {
        Node cur = root;
        for(char c : word.toCharArray()){
            if(cur.next[c-'a'] ==null){
                cur.next[c-'a']  = new Node();
            }
            cur = cur.next[c-'a'];
        }
        cur.isEnd = true;
    }
    
    public boolean search(String word) {
        Node cur = root;
        for(char c : word.toCharArray()){
            if(cur.next[c-'a'] ==null){
              return false;
            }
            cur = cur.next[c-'a'];
        }
        return cur.isEnd;
        
    }
    
    public boolean startsWith(String prefix) {
         Node cur = root;
        for(char c : prefix.toCharArray()){
            if(cur.next[c-'a'] ==null){
              return false;
            }
            cur = cur.next[c-'a'];
        }
        return true;
    }
}


--------------------------

class Trie {
    private class Node {
        private boolean isWord;
        private Node[] child;

        private Node() {
            isWord = false;
            child = new Node[26];
        }
    }

    Node root;
    /** Initialize your data structure here. */
    public Trie() {
        root = new Node();
    }

    /** Inserts a word into the trie. */
    public void insert(String word) {
        Node cur = root;
        for (int i = 0; i < word.length(); i++) {
            int index = word.charAt(i) - 'a';
            if (cur.child[index] == null) {
                Node next = new Node();
                cur.child[index] = next;
            }
            cur = cur.child[index];
        }
        cur.isWord = true;
    }

    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node cur = root;
        for (int i = 0; i < word.length(); i++) {
            int index = word.charAt(i) - 'a';
            if (cur.child[index] == null) {
                return false;
            }
            cur = cur.child[index];
        }
        return cur.isWord;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Node cur = root;
        for (int i = 0; i < prefix.length(); i++) {
            int index = prefix.charAt(i) - 'a';
            if (cur.child[index] == null) {
                return false;
            }
            cur = cur.child[index];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
