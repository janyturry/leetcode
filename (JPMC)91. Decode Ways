
//91. Decode Ways
//leetcode
/*
62. Unique Paths
70. Climbing Stairs
509. Fibonacci Number

*/

https://leetcode-cn.com/problems/decode-ways/solution/gong-shui-san-xie-gen-ju-shu-ju-fan-wei-ug3dd/



class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        s = " " + s;
        char[] cs = s.toCharArray();
        int[] f = new int[n + 1];
        f[0] = 1;
        for (int i = 1; i <= n; i++) { 
            // a : 代表「当前位置」单独形成 item
            // b : 代表「当前位置」与「前一位置」共同形成 item
            int a = cs[i] - '0', b = (cs[i - 1] - '0') * 10 + (cs[i] - '0');
            // 如果 a 属于有效值，那么 f[i] 可以由 f[i - 1] 转移过来
            if (1 <= a && a <= 9) f[i] = f[i - 1];
            // 如果 b 属于有效值，那么 f[i] 可以由 f[i - 2] 或者 f[i - 1] & f[i - 2] 转移过来
            if (10 <= b && b <= 26) f[i] += f[i - 2];
        }
        return f[n];
    }
}



//思路：DP， 设置dp数组，长度为n+1, dp[i] 表示一直到第I位置一共有多少个 decode方法， 因为只有1位数和2位数可以对应decode,所以只需要看当前位置的一位或者前两位
public class numDecodings {
	public int numDecodings(String s) {
		if (s == null || s.length() < 1) {
			return 0;
		}

		int[] dp = new int[s.length() + 1];
		int n = s.length();
		dp[0] = 1;
		dp[1] = s.charAt(0) == '0' ? 0 : 1;

		for (int i = 2; i <= n; i++) {
			int first = Integer.parseInt(s.substring(i - 1, i));
			int second = Integer.parseInt(s.substring(i - 2, i));

			if (first >= 1 && first <= 9) {
				dp[i] = dp[i] + dp[i - 1];
			}

			if (second >= 10 && second <= 26) {
				dp[i] = dp[i] + dp[i - 2];
			}
		}
		return dp[n];
	}
}
