//451. Sort Characters By Frequency
//leetcode
//

import java.util.Map;
import java.util.PriorityQueue;

//according to user "orxanb", O(nlogm), m is the distinguish character, can be O(1) since only 26 letters. So the overall time complexity should be O(n), the same as the buck sort with less memory use.
class Solution {
    public String frequencySort(String s) {
        if(s == null || s.length()< 1){
            return s;
        }

        Map<Character, Integer> map = new HashMap<>();

        for(char c: s.toCharArray()){
            map.put(c , map.getOrDefault(c, 0) + 1);
        }

        PriorityQueue<Map.Entry<Character, Integer>> q = new PriorityQueue<>( (a,b) -> b.getValue() - a.getValue());
        q.addAll(map.entrySet());

        StringBuilder sb = new StringBuilder();
        while(!q.isEmpty()){
            Map.Entry tmp = q.poll();
            for(int i = (int)tmp.getValue(); i >0 ; i--){
                sb.append(tmp.getKey());
            }
        }
        return sb.toString();
    }
}
