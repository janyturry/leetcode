class Solution {
    public void solveSudoku(char[][] board) {
        if(board == null || board.length <1){
            return;
        }
        helper(board);
    }
    
    public boolean helper(char[][]board){
        int m = board.length;
        int n = board[0].length;
        
        for(int i = 0; i < m; i++){
            for(int j= 0; j < n; j++){
                if(board[i][j] =='.'){
                    for(char  z = '1'; z <='9'; z++){
                        if(valid(board, i,j,z)){
                            board[i][j] = z;
                            if(helper(board)){
                                return true;
                            }
                            board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    public boolean valid(char[][]board, int row, int col, char z){
        int  m = board.length;
        int n = board[0].length;
        
        for(int i = 0 ; i < n; i++){
            if(board[row][i] == z){
                return false;
            }
        }
        
        for(int j = 0;  j < m; j++){
            if(board[j][col] == z){
                return false;
            }
        }
        
        int starRow = (row/3)*3;
        int starCol = (col/3)*3;
        
        for(int i = starRow; i < starRow +3; i++){
            for(int j = starCol; j < starCol+3 ;j++){
                if(board[i][j] == z){
                    return false;
                }
            }
        }
        
        return true;
    }
    
    
}
