//362. Design Hit Counter




import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

class HitCounter {
    private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();
    private final Lock write = rwl.writeLock();

    int[] time;
    int[] hits;



    /** Initialize your data structure here. */
    public HitCounter() {
        time = new int [300];
        hits = new int[300];
    }

    /** Record a hit.
     @param timestamp - The current timestamp (in seconds granularity). */
    public void hit(int timestamp) {
        write.lock();
        try{
            int idx = timestamp%300;
            if(time[idx] == timestamp){
                hits[idx]++;
            }else{
                time[idx] = timestamp;
                hits[idx] = 1;
            }
        }finally{
            write.unlock();
        }
    }

    /** Return the number of hits in the past 5 minutes.
     @param timestamp - The current timestamp (in seconds granularity). */
    public int getHits(int timestamp) {
        int sum = 0;
        for(int i  =0 ; i < 300; i++){
            if(timestamp - time[i] < 300){
                sum+=hits[i] ;
            }
        }
        return sum;
    }
}

/**
 * Your HitCounter object will be instantiated and called as such:
 * HitCounter obj = new HitCounter();
 * obj.hit(timestamp);
 * int param_2 = obj.getHits(timestamp);
 */
