
/*
Complexity Analysis
Time Complexity: O(N) where N is the length of A.
Space Complexity: O(N)

数组其实是有序的， 只不过负数平方之后可能成为最大数了。

那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。

此时可以考虑双指针法了，i指向其实位置，j指向终止位置。

定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。

如果A[i] * A[i] < A[j] * A[j] 那么result[k--] = A[j] * A[j]; 。
如果A[i] * A[i] >= A[j] * A[j] 那么result[k--] = A[i] * A[i]; 。
*/
//two pointer
class Solution {
    public int[] sortedSquares(int[] A) {
        int n = A.length;
        int [] res = new int[n];
        int left = 0; 
        int right = n-1;
        for(int i = n-1; i >=0 ;i--){
            if(Math.abs(A[left]) > Math.abs(A[right])){
                res[i] = A[left]*A[left];
                left++;
            }else{
                res[i] = A[right]*A[right];
                right--;
            }
            
        }
        return res;
    }
}
