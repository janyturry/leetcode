/*
Complexity Analysis

Time Complexity: O(N), where N is the number of nodes in the BST. In the worst case we might be visiting all the nodes of the BST.
Space Complexity: O(N). This is because the maximum amount of space utilized by the recursion stack would be
N . since the height of a skewed BST could be N.
*/

//recursive
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root.val < p.val && root.val < q.val){
            return lowestCommonAncestor(root.right, p,q);
        }else if(root.val > p.val && root.val > q.val){
            return lowestCommonAncestor(root.left, p,q);
        }else{
            return root;
        }
    }
}




/*
Complexity Analysis
Time Complexity : O(N), where N is the number of nodes in the BST. In the worst case we might be visiting all the nodes of the BST.
Space Complexity : O(1).
*/

//iterative
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while(root != null){
            if(root.val < p.val && root.val < q.val){
                root = root.right;
            }else if(root.val > p.val && root.val > q.val){
                root =root.left;
            }else{
                break;
            }
        }
        return root;
    }
}
