//560. Subarray Sum Equals K
//leetcode



//solution 1 : native
class Solution {

    //native
    public static int subarraySum(int[] nums, int k) {
        int  len = nums.length;
        int  count = 0;
        for(int i = 0 ; i < len; i++){
            for(int j = i; j < len; j++){
                int tmpSum = 0;
                for(int p = i; p <=j; p++){
                    tmpSum+= nums[p];

                }
                if(tmpSum == k){
                    count++;
                }
            }
        }
        return count;
    }



    //solution 2: using preSum
    public int subarraySum(int[] nums, int k) {
        int  len = nums.length;
        int  count = 0;
        for(int i = 0 ; i < len; i++){
            int tmpSum = 0;
            for(int j = i; j < len; j++){
                tmpSum+=nums[j];

                if(tmpSum == k){
                    count++;
                }
            }
        }
        return count;
    }



    //solution 3 : Linear Solution
    /*
    using the prefixSum array of the original input
    prefixSum[x] = sum of subarry (0,x) = num[0] + num[1] +....+nums[x]


    index :           0 1 2
    nums =           [1,1,1]
    preFixSum: =    0 1 2 3               preFixSum [x] = preFixSum[x-1] + nums[x]

    HashMap:      {<0,1>, <1,1>, <2,1>, <3,1>}


    sum of  subarray(i,j) = prefixSum[j] - prefixSum[i-1]

    prefixSum[j]   =   nums[0] + nums[1] + .... +nums[i-1] + num[i] + ....+ nums[j]
    prefixSum[i-1] =   nums[0] + nums[1] + .... + nums[i-1]
    eg: sum of subarray(1,2) = prefixSum[2] - prefixSum[0]

    fix how many paris of <i,j>
    where i < j, prefixSum[j] - prefixSum[i] == k?

    idea:
    for each k:
            how many i < j satisfies prefixSum[i] = prefixSum[j] -k

    using a hashmap<Integer, Integer> to record:
            key : prefixSum value
            value: # of occurrence of the prefixSum value

            time : O(n)

*/
    public int subarraySum(int[] nums, int k) {

    }

    public static void main(String[] argc){
        int[] test = new int[]{1,1,1};


        System.out.println(subarraySum(test, 2));
    }
}



