
//不要转化成Long
//time : O(logn^2)

/*
time complexity explain: 
Good question. I hadn't thought of that till now. But let me try to deduce how lee215's solution has a O (log (n^2)) time complexity.
Let's say for example, we had an array of length n.
A doubly nested for loop that looks like the following would have a time complexity of O(n^2):

for(int i = 0; i < n; i++){
for(int j = 0; j < i; j++){
//...
}

}

Similarly, the code I'm running is doing the following:
Let's say a is 100, b is 2,4,8,16,32,64, stopping before 100.
while( a - (b << 1 << x) >= 0){
x++;
}
In our code, b is like the j pointer, a is like the i pointer.
Then a is decremented because of this line
a -= b << x;
so a would be readjusted to 36 ( 100 - 64 ). b starts again from 2. So b loops from 2,4,8,16,32, stopping before 36.

So you can deduce by analogy the n^2 where n would be dividend. The reason log comes into this is because we are squaring b at each step. The log is a logarithm of base 2.

Hope it helps. Feel free to correct me if I'm wrong
 */
class Solution {
    public int divide(int dividend, int divisor) {
        // int range : -2的31次方 到 2 的31次方-1
        if (dividend == Integer.MIN_VALUE && divisor == -1) {
            return Integer.MAX_VALUE;
        }

        // 判断结果是不是负数
        boolean isNegative = false;
        if((dividend >0 && divisor<0) ||  (dividend <0 && divisor>0)){
            isNegative = true;
        }

        // 将除数和被除数都转为负数
        dividend = dividend < 0 ? dividend : -dividend;
        divisor = divisor < 0 ? divisor : -divisor;

        //因为PASS进去的都是负数， 负负得正，所以最后出来的肯定是正数
        int res = helper(dividend, divisor);

        return isNegative ? -res : res;
    }

    private int helper(int dividend, int divisor) {
        //例如  -5/-8
        if (dividend > divisor) {
            return 0;
        }

        int tmp = divisor;
        int count = 1;

        // 条件tmp + tmp < 0防止溢出
        /*
        我们不断的把tmp翻倍，并且如果翻倍后的结果比dividend大的话就可以继续循环（即如果满足tmp + tmp >= dividend），
        但是翻倍之后有可能使得tmp溢出，即由负数变成正数，此时肯定有tmp + tmp >= dividend，但是这就不符合我们的要求了，
        所以循环的条件除了tmp + tmp >= dividned之外还得加上tmp + tmp < 0，以此保证tmp + tmp没有发生溢出
        */
        while (tmp + tmp < 0 && dividend <= tmp + tmp) {
            count += count;
            tmp += tmp;
        }

        return count + helper(dividend - tmp, divisor);
    }
}
