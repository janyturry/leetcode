
//97. Interleaving String
//leetcode
//思路： 使用DP的思路， DP table represents if s3 is interleaving at (i+j)th position when s1 is at ith position, and s2 is at jth position
//
public class isInterleave {
	public boolean isInterleave(String s1, String s2, String s3) {
        int m = s1.length();
        int n = s2.length();
        int l = s3.length();
        
        if(m + n != l){
        	return false;
        }
        
        boolean[][] res = new boolean [m+1][n+1];
        
        for(int i = 0; i < m+1 ; i++){
        	for(int j = 0; j < n+1; j++){
        	    if(i ==0 && j ==0){
        	    	res[i][j] = true;
        	    }else if(i ==0){
        	    	//choose s2 letter
        	    	res[i][j] = (res[i][j-1] && s2.charAt(j-1) == s3.charAt(i+j-1));
        	    }else if(j ==0){
        	    	//choose s1 letter
        	    	res[i][j] = (res[i-1][j] && s1.charAt(i-1) == s3.charAt(i+j-1));
        	    }else {
        	    	
        	    	res[i][j]  = (res[i-1][j] && s1.charAt(i-1) == s3.charAt(i+j-1)) ||  (res[i][j-1] && s2.charAt(j-1) == s3.charAt(i+j-1));
        	    }
        	}
        }
		return res[m][n];
	}
}
