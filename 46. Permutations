
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

//46. Permutations
//leetcode
//跟permu 2 一样
//preNum限定每个位置的数不需要重复
//visit 限定了每隔数字只能使用一次

public class permute {
	public static List<List<Integer>> permute(int[] nums) {
		List<List<Integer>> res = new ArrayList<List<Integer>>();
		if (nums == null || nums.length == 0) {
			return res;
		}

		Arrays.sort(nums);
		boolean[] visit = new boolean[nums.length];
		helper(res, new ArrayList<Integer>(), nums, visit);
		return res;
	}

	public static void helper(List<List<Integer>> res, ArrayList<Integer> tmp,int[] nums, boolean[] visit) {
		if (tmp.size() == nums.length) {
			res.add(new ArrayList<Integer>(tmp));
			return;
		} else {
			int preNum = nums[0] - 1;
			for (int i = 0; i < nums.length; i++) {
				if (!visit[i] && preNum != (nums[i])) {
					tmp.add(nums[i]);
					visit[i] = true;
					preNum = nums[i];
					helper(res, tmp, nums, visit);
					tmp.remove(tmp.size() - 1);
					visit[i] = false;
				}
			}
		}
	}
}
