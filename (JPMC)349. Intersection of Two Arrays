/*
Use two hash sets

Time complexity: O(n)
*/

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
       if(nums1 == null || nums2 == null || nums1.length < 1 || nums2.length < 1){
           return new int[0];
       }
        
        HashSet<Integer> set1 = new HashSet<>();
        HashSet<Integer> res = new HashSet<>();


        
        for(int i : nums1){
            set1.add(i);
        }
        
        int count = 0;
        for(int i: nums2){
            if(set1.contains(i)){
                res.add(i);
            }
        }
        
        int size = res.size();
        int[] ar = new int[size];
        for(int i : res){
            ar[count++] = i;
        }
        return ar;
        
    }
}



/*
Sort both arrays, use two pointers

Time complexity: O(nlogn)
*/
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
       if(nums1 == null || nums2 == null || nums1.length < 1 || nums2.length < 1){
           return new int[0];
       }
        
       Arrays.sort(nums1);
       Arrays.sort(nums2);
       
        int i = 0;
        int j = 0;
        
        
        HashSet<Integer> set = new HashSet<>();
        
        while( i <= nums1.length -1 && j <=nums2.length -1){
            if(nums1[i] < nums2[j]){
                i++;
            }else if(nums1[i] > nums2[j]){
                j++;
            }else{
                set.add(nums1[i]);
                i++;
                j++;
            }
        }
        
        int size = set.size();
        int [] res = new int[size];
        int count  = 0;
       for(int l : set){
           res[count++] = l;
       }
        return res;
        
    }
}
