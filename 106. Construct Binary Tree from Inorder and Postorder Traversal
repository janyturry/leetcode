//106. Construct Binary Tree from Inorder and Postorder Traversal
//recursive
//O(n) time and O(n) space

import javax.swing.tree.TreeNode;
import java.util.HashMap;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder == null || postorder == null || inorder.length != postorder.length){
            return null;
        }
        HashMap<Integer, Integer> map= new HashMap<Integer, Integer>();
        for(int i = 0 ; i < inorder.length; i++){
            map.put(inorder[i] , i);
        }

        return helper(inorder, 0, inorder.length-1, postorder, 0, postorder.length-1 , map);
    }

    public TreeNode helper(int[] inorder, int inorderS , int inorderE, int[] postorder, int postorderS, int postorderE, HashMap<Integer, Integer> map){
        if(inorderS > inorderE || postorderS > postorderE){
            return null;
        }

        TreeNode root = new TreeNode(postorder[postorderE]);
        int rootIndex = map.get(postorder[postorderE]);
        TreeNode left = helper(inorder,inorderS , rootIndex -1 , postorder, postorderS, postorderS +  rootIndex -inorderS-1  , map);
        TreeNode right = helper(inorder,rootIndex + 1 ,inorderE , postorder, postorderS +  rootIndex -inorderS , postorderE -1  , map);
        root.left = left;

        root.right = right;
        return root;

    }


}
