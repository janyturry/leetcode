class Solution {
    public String minRemoveToMakeValid(String s) {
        if(s == null || s.length() < 1){
            return s;
        }
        
        Deque<Integer> stack = new LinkedList<>();
        StringBuilder sb = new StringBuilder(s);
        
        for(int i = 0 ; i < s.length(); i++){
            char c = s.charAt(i);
            if(c == '('){
                stack.push(i);
            }else if (c == ')'){
                if(!stack.isEmpty()){
                    stack.pop();
                }else{
                    sb.setCharAt(i, '-');
                }
            }
        }
        
        while(!stack.isEmpty()){
            sb.setCharAt(stack.pop(), '-');
        }
        
        return sb.toString().replaceAll("\\-","");
    }
}

/*
Time: O(n). We process each character once, or twice for 'single' '('.
Memory: O(n) for the stack.

基本思路就是左括号右括号的INDEX 我们都入栈， 能配对的就出栈， 最后留下来的都是并不能配对的所以留下来DELETE from  STRINGBUILDER 
常规的判断括号字符串是不是合法的括号对，我们应该已经很熟悉了。
遇到左括号，则压入堆栈；遇到右括号，则判断堆栈是否空；此时，如果堆栈为空，则字符串非法；反之，则弹出栈顶的左括号；最终遍历完字符串之后，如果堆栈非空，则字符串非法。
上面的算法有个特点，压入堆栈的一定都是左括号，右括号不会被压入堆栈。

然而这一题却不同，我们需要将非法的右括号同样也压入堆栈，在遍历完字符串之后，将堆栈内的括号全部从字符串中移除，
得到的即为这道题的答案。最后查看堆栈的话，同样也可以发现一个特点，堆栈内的右括号一定是在左括号之前。（废话！如果左括号在前，不就左右配对消失了么。）

*/

class Solution {
    public String minRemoveToMakeValid(String s) {
        StringBuffer sb = new StringBuffer(s);
        Deque<Integer> stack = new LinkedList<>();
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(c == '('){
                stack.push(i);
            }
            else if(c == ')'){
                if(!stack.isEmpty() && s.charAt(stack.peek()) == '('){
                    stack.pop();
                }
                else{
                    stack.push(i);
                }
            }
        }
        while(!stack.isEmpty()){
            sb.deleteCharAt(stack.pop());
        }
        return sb.toString();
    }
}
