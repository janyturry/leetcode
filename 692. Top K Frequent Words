import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;



//692. Top K Frequent Words
////leetcode




/*min Head : General               : O(nlogk),     每次插入最小堆需要logk
             k<< n                 : O(n)
             k ~~~ n  (eg k = n/2) : O(nlogn)


*/


class Solution {
    class element{
        int frequent;
        String word;

        public element(int frequent, String word){
            this.frequent = frequent;
            this.word = word;
        }
    }


    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map = new HashMap<>();

        for(String s: words){
            if(!map.containsKey(s)){
                map.put(s , 1);
            }else{
                map.put(s , map.get(s)+1);
            }
        }

        //PriorityQueue<Map.Entry<String, Integer>> pq = new PriorityQueue<>( (a, b) ->  a.getValue() == b.getValue() ? b.getKey().compareTo(a.getKey()) : a.getValue() - b.getValue() );
        PriorityQueue<element> pq = new PriorityQueue<>( map.size(), new Comparator<element>(){
            @Override
            public int compare(element a , element b) {
                if(a.frequent == b.frequent){
                    return b.word.compareTo(a.word);
                }else{
                    return a.frequent - b.frequent;
                }
            }
        }  );


        for (String ss : map.keySet()){
            element tmp = new element(map.get(ss), ss);
            pq.offer(tmp);
            if(pq.size() >k){
                pq.poll();
            }
        }

        List<String> res = new LinkedList<>();

        while(!pq.isEmpty()){
            res.add(0, pq.poll().word);
        }

        return res;

    }
}}



//partition
/*
min Head : General                 : O(n+ klogk),     每次插入最小堆需要logk
             k<< n                 : O(n)
             k ~~~ n  (eg k = n/2) : O(nlogn)


 */


/*
class Solution {
    class element{
        int frequent;
        String word;

        public element(int frequent, String word){
            this.frequent = frequent;
            this.word = word;
        }
    }
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map = new HashMap<>();

        for(String s: words){
            if(!map.containsKey(s)){
                map.put(s , 1);
            }else{
                map.put(s , map.get(s)+1);
            }
        }

        element[] ar = new element[map.size()];

        int i = 0;
        for(String key : map.keySet()){
            element tmp  = new element(map.get(key), key);
            ar[i++] = tmp;
        }




    }


    public int partition (element[] ar, int low, int high){
        int l = low;
        int pv = ar[high].frequent;
        for(int j = low; j < high; j++){
            if(ar[j].frequent < pv){
                swap(ar, i, l++);

            }
        }
        swap(ar, l, high);
        return l;
    }


    public void swap(element[] ar, int a, int b){
        element tmp = ar[a];
        ar[b] = ar[a];
        ar[a] = tmp;
    }

*/

}
