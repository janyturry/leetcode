
//117. Populating Next Right Pointers in Each Node II
//leetcode
//思路：需要设置3个点， 上一层的当前点， 下一层的nextLvlPre, 下一层的最左点
public class connect2 {
	public class TreeLinkNode {
		int val;
		TreeLinkNode left, right, next;
		TreeLinkNode(int x) {
			val = x;
		}
	}

	public void connect(TreeLinkNode root) {
		TreeLinkNode nextLvlHead = root; // 下一层最最左边的节点
		TreeLinkNode nextLvlPre = null; // 下一层的nextLvlPrevious node
		TreeLinkNode upperLvlCur = null; // 上一层的当前节点

		while (nextLvlHead != null) {//这是检测有没有下一层
			upperLvlCur = nextLvlHead;
			nextLvlPre = null;
			nextLvlHead = null;
			while (upperLvlCur != null) {//这是下一层从左到右的循环
				if (upperLvlCur.left != null) {
					if (nextLvlPre != null) {
						nextLvlPre.next = upperLvlCur.left;
					} else {
						nextLvlHead = upperLvlCur.left;
					}
					nextLvlPre = upperLvlCur.left;
				}

				if (upperLvlCur.right != null) {
					if (nextLvlPre != null) {
						nextLvlPre.next = upperLvlCur.right;
					} else {
						nextLvlHead = upperLvlCur.right;
					}
					nextLvlPre = upperLvlCur.right;
				}
				// 只需要一直next到null,然后nextLvlHead 默认为下一层最左边的点，所以会继续循环.
				upperLvlCur = upperLvlCur.next;
			}
		}
	}
}
