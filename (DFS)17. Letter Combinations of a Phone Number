
//TIME: O(branch factor ^ depth  ) < O(4^n)
//DFS
class Solution {
    String[] map = new String[] {
        "",
        "",
        "abc",
        "def",
        "ghi",
        "jkl",
        "mno",
        "pqrs",
        "tuv",
        "wxyz"
    };
    List < String > res;
    public List < String > letterCombinations(String digits) {
        res = new LinkedList < > ();
        if (digits == null || digits.length() < 1) {
            return res;
        }
        dfs(digits, map, new StringBuilder(), 0);
        return res;
    }

    public void dfs(String digits, String[] map, StringBuilder sb, int index) {
        if (index == digits.length()) {
            res.add(sb.toString());
            return;
        }
        //不需要FOR是因为这里的第一个位置只有第一个按下的数字， 之后的位置可以直接递归， 例如“12”， 如果有FOR， 第一层数字2的字母就会出现
        /*
        for(int i = index; i < digits.length(); i++){
            int num = digits.charAt(i) - '0';
            for(char c : map[num].toCharArray()){
                sb.append(c);
                dfs(digits, map, sb, i+1);
                sb.deleteCharAt(sb.length()-1);
            }
        }
        */

        int num = digits.charAt(index) - '0';
        for (char c: map[num].toCharArray()) {
            sb.append(c);
            dfs(digits, map, sb, index + 1);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}






//17. Letter Combinations of a Phone Number
//思路：重点是一开始就建立linkedlist = new LinkedList<> ,这样 define 可以直接当成数组来用
//char to integer: char c - '0'
////TIME: O(branch factor ^ depth  ) < O(4^n)
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class letterCombinations {
	
	//解法2
	public static List<String> letterCombinations(String digits) {
		LinkedList<String> res=  new LinkedList<String>();
		String[] mapping = new String[] { "", "", "abc", "def", "ghi", "jkl","mno", "pqrs", "tuv", "wxyz" };
        if(digits == null  || digits.length() ==0){
        	return res;
        }
        
        res.offer("");
        char[] di = digits.toCharArray();
        for(int i = 0; i < di.length; i++){
            char[] tmp = mapping[di[i]-'0'].toCharArray();
            while(!res.isEmpty() && res.peek().length() ==i){
            	String t = res.poll();
            	for(char c : tmp)
            	res.offer(t+c);
            }
        }
        return res;
	}
}


