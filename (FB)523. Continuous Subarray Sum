/*
时间复杂度：O(n)
空间复杂度：O(n)

https://leetcode-cn.com/problems/continuous-subarray-sum/solution/gong-shui-san-xie-tuo-zhan-wei-qiu-fang-1juse/
*/

class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        int len = nums.length;
        int[]sum = new int[len+1];
        
        //(存放sum%k, index)
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i = 1; i <=len; i++){
            sum[i] = sum[i-1] + nums[i-1];
        }
        
        map.put(0,0);
        for(int i = 1; i <=len; i++){
            if(map.containsKey(sum[i]%k)){
            //不可以是i - map.get(sum[i]%k) >=1， 因为是>=1的话根据前缀和的定义，就只能是num[i]一个数
                if(i - map.get(sum[i]%k) >=2 ){
                    return true;
                }
            }else{
                map.put(sum[i]%k, i);
            }
        }
        return false;
        
    }
}
