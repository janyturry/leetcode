//https://leetcode-cn.com/problems/combination-sum/solution/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2/

/*
Time complexity is O(N^target) where N is a length of candidates array.
Space complexity is O(target).


This is worst case and without any optimization, like moving position forward and sorting to stop early.
Just assuming that each recursive step we go over all existing candidates, so base N.
And go as deep as target in our recursive calls (if candidates are close to 1), so power of target.
You can mention that this is worst case and optimizations can make time complexity a little better, for interview I think this should be enough.


复杂度分析

时间复杂度：
O(S)，其中 S 为所有可行解的长度之和。从分析给出的搜索树我们可以看出时间复杂度取决于搜索树所有叶子节点的深度之和，即所有可行解的长度之和。在这题中，我们很难给出一个比较紧的上界，我们知道 
O(n×2的N次方) 是一个比较松的上界，即在这份代码中，n 个位置每次考虑选或者不选，如果符合条件，就加入答案的时间代价。但是实际运行的时候，因为不可能所有的解都满足条件，
递归的时候我们还会用 target - candidates[idx] >= 0 进行剪枝，所以实际运行情况是远远小于这个上界的。
空间复杂度：O(target)。除答案数组外，空间复杂度取决于递归的栈深度，在最差情况下需要递归 。

 */


class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        //排序是为了后面剪枝
        Arrays.sort(candidates);
        helper(candidates, 0, target, res, new ArrayList<Integer>());
        return res;
    }

    public void helper(int[] candidates, int start, int target, List<List<Integer>> res, List<Integer> path){
        //满足条件，加入结果
        if(target == 0){
            res.add(new ArrayList<Integer>(path));
        }
        //不满足条件，直接return
        if(target <0){
            return;
        }
        // 重点理解这里从 begin 开始搜索的语意
        //使用START 是为了去掉情况例如 candidate : [ 5,2] , res : [ 5,2] , [2,5], 因为不计较顺序， 所以这是重复结果，
        //要去除重复，就需要在每一层里面不选择同一层前面出现过的结果。
        for(int i = start; i < candidates.length;i++){
            // 重点理解这里剪枝，前提是候选数组已经有序，
            if(target - candidates[i]<0){
                break;
            }
            //做选择，选择一个
            path.add(candidates[i]);
            //注意这里PASS进去i而不是start, 因为（2，1） ，（1，2） 是一样的
            //也不能放i+1,因为要重复用每个元素
            helper(candidates, i, target - candidates[i], res, path);
            //把刚才的选择POP出来
            path.remove(path.size()-1);
        }
    }
}
