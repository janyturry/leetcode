//https://leetcode-cn.com/problems/combination-sum/solution/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2/

/*
Time complexity is O(N^target) where N is a length of candidates array.
Space complexity is O(target).


This is worst case and without any optimization, like moving position forward and sorting to stop early.
Just assuming that each recursive step we go over all existing candidates, so base N.
And go as deep as target in our recursive calls (if candidates are close to 1), so power of target.
You can mention that this is worst case and optimizations can make time complexity a little better, for interview I think this should be enough.
 */


class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        //排序是为了后面剪枝
        Arrays.sort(candidates);
        helper(candidates, 0, target, res, new ArrayList<Integer>());
        return res;
    }

    public void helper(int[] candidates, int start, int target, List<List<Integer>> res, List<Integer> path){
        //满足条件，加入结果
        if(target == 0){
            res.add(new ArrayList<Integer>(path));
        }
        //不满足条件，直接return
        if(target <0){
            return;
        }
        // 重点理解这里从 begin 开始搜索的语意
        //使用START 是为了去掉情况例如 candidate : [ 5,2] , res : [ 5,2] , [2,5], 因为不计较顺序， 所以这是重复结果，
        //要去除重复，就需要在每一层里面不选择同一层前面出现过的结果。
        for(int i = start; i < candidates.length;i++){
            // 重点理解这里剪枝，前提是候选数组已经有序，
            if(target - candidates[i]<0){
                break;
            }
            //做选择，选择一个
            path.add(candidates[i]);
            helper(candidates, i, target - candidates[i], res, path);
            //把刚才的选择POP出来
            path.remove(path.size()-1);
        }
    }
}
