/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode str2tree(String s) {
        if(s ==  null || s.length() <1){
            return null;
        }

        Stack<TreeNode> stack = new Stack<>();

        for(int i = 0, j = i; i <= s.length()-1; i++, j=i){
            char cur = s.charAt(i);
            if(cur == ')'){
                stack.pop();
            }else if(cur >='0' && cur<='9' || cur == '-') {
                //这里移动的是I 不是J 是因为做完一次循环之后， J都会设置到I那里，
                while(i+1 <= s.length()-1 && s.charAt(i+1) >='0' && s.charAt(i+1) <='9'){
                    i++;
                }

                TreeNode node = new TreeNode(Integer.valueOf(s.substring(j,i+1)));
                if(!stack.isEmpty()){
                    TreeNode parent = stack.peek();
                    if(parent.left ==null){
                        parent.left = node;
                    }else{
                        parent.right = node;
                    }
                }
                stack.push(node);
            }
        }
        return stack.isEmpty()? null : stack.peek();
    }
}
