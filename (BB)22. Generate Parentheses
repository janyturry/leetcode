//DFS

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new LinkedList<>();
        
        if(n == 0){
            return res;
        }
        
        dfs(new StringBuilder(), n ,n, res);
        return res;
    }
    
    public void dfs(StringBuilder sb, int left, int right, List<String>res){
        if(left == 0 && right == 0){
            res.add(sb.toString());
            return;
        }
        
        if(right < left){
            return;
        }
        
        if(left>0){
            sb.append('(');
            dfs(sb, left-1, right, res);
            sb.deleteCharAt(sb.length()-1);
        }
        
         if(right>0){
            sb.append(')');
            dfs(sb, left, right -1 , res);
            sb.deleteCharAt(sb.length()-1);
        }
    }
}
