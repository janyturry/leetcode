
/*
time: O(mn)
space:O(mn)
*/

class Solution {
    int dirX[] = new int[]{1,0,-1,  0};
    int dirY[] = new int[]{0,1, 0, -1};
    
    class point{
        int x;
        int y;
        
        public point(int x, int y){
            this.x = x;
            this.y = y;
        }  
    }
    
     public void wallsAndGates(int[][] rooms) {
         Queue<point> q = new LinkedList<>();
         
         for(int i =0 ; i < rooms.length; i++){
            for(int j = 0; j < rooms[0].length; j++){
                if(rooms[i][j] == 0){
                    q.offer(new point(i,j));
                }
            }
         }
         
         int step= 1;
         while(!q.isEmpty()){
             int size = q.size();
             for(int i =0 ; i< size; i++){
                 point cur = q.poll();
                 for(int j = 0 ;  j< 4; j++){
                    int newX = cur.x + dirX[j];
                    int newY = cur.y + dirY[j];
                     if(newX>=0 && newX<=rooms.length-1 && newY>=0 && newY<=rooms[0].length-1&& rooms[newX][newY] ==2147483647 ){
                         rooms[newX][newY] = step;
                         q.offer(new point(newX, newY));
                     }   
                 }
             }
             step++;
         }  
    }
}
